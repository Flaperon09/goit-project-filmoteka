{"mappings":"C,A,W,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,a,W,O,C,G,I,E,E,SCEA,IAAM,EAAM,UAER,EAAe,AAAA,CAAA,EAAA,EAAA,gBAAe,AAAf,EAAiB,GAG7B,SAAS,EAAW,CAAO,EAC9B,IAAI,EAAI,EAGR,EAAa,OAAO,CAAC,AAAA,IACb,IAAY,GACZ,CAAA,GAAK,CAAA,CAEb,GAEU,IAAN,IAGI,EAAa,IAAI,CAAC,GAI1B,AAAA,CAAA,EAAA,EAAA,gBAAe,AAAf,EAAiB,EAAK,GAC1B,CApBK,GAAgB,CAAA,EAAe,EAAE,AAAF,C,G,E,Q,S,C,C,C,ECL7B,SAAS,EAAiB,CAAG,CAAE,CAAK,EACzC,GAAI,CACF,IAAM,EAAkB,KAAK,SAAS,CAAC,GACvC,aAAa,OAAO,CAAC,EAAK,EAC5B,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,oBAAqB,EAAM,OAAO,CAClD,CACF,CAEO,SAAS,EAAiB,CAAG,EAClC,GAAI,CACF,IAAM,EAAkB,aAAa,OAAO,CAAC,GAC7C,OAAO,AAAoB,OAApB,EAA2B,KAAA,EAAY,KAAK,KAAK,CAAC,EAC3D,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,oBAAqB,EAAM,OAAO,CAClD,CACF,C,E,E,O,C,mB,W,O,C,G,E,E,O,C,mB,W,O,C,E,G,E,Q,S,C,C,C,E,E,E,O,C,W,W,O,C,G,I,E,E,SCdA,IAAM,EAAM,QAER,EAAa,AAAA,CAAA,EAAA,EAAA,gBAAe,AAAf,EAAiB,GAG3B,SAAS,EAAS,CAAO,EAC5B,IAAI,EAAI,EAGR,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","sources":["<anon>","src/js/watched.js","src/js/localStorage.js","src/js/queue.js","src/js/getMovieDetails_API.js","src/js/modal.js","src/library.js","src/js/library/selectedMovie.js"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire4cee\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire4cee\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"dULZn\", function(module, exports) {\n\n$parcel$export(module.exports, \"addWatched\", function () { return $a215baf1061f969f$export$96f7c0dfb8dc6322; });\n\nvar $UL92Z = parcelRequire(\"UL92Z\");\nconst $a215baf1061f969f$var$key = \"watched\"; // Ключ локального хранилища для просмотренных фильмов\nlet $a215baf1061f969f$var$watchedMovie = (0, $UL92Z.loadLocalStorage)($a215baf1061f969f$var$key); // Загружаем сохранённые в локальном хранилище данные\nif (!$a215baf1061f969f$var$watchedMovie) $a215baf1061f969f$var$watchedMovie = [];\nfunction $a215baf1061f969f$export$96f7c0dfb8dc6322(idMovie) {\n    let i = 0; // Счётчик совпадений\n    // Проверяем, есть ли добавляемый фильм в списке для просмотра\n    $a215baf1061f969f$var$watchedMovie.forEach((element)=>{\n        if (element === idMovie) i += 1;\n    });\n    if (i !== 0) return; // -> ничего не делаем.\n    else $a215baf1061f969f$var$watchedMovie.push(idMovie) // -> добавляем фильм в список.\n    ;\n    // Добавляем массив фильмов в локальное хранилище.\n    (0, $UL92Z.saveLocalStorage)($a215baf1061f969f$var$key, $a215baf1061f969f$var$watchedMovie);\n}\n\n});\nparcelRegister(\"UL92Z\", function(module, exports) {\n\n$parcel$export(module.exports, \"saveLocalStorage\", function () { return $0aa9cd13c14a6e1e$export$f3928fa528b0a11c; });\n$parcel$export(module.exports, \"loadLocalStorage\", function () { return $0aa9cd13c14a6e1e$export$d3dfa491819f2d3c; });\nfunction $0aa9cd13c14a6e1e$export$f3928fa528b0a11c(key, value) {\n    try {\n        const serializedState = JSON.stringify(value);\n        localStorage.setItem(key, serializedState);\n    } catch (error) {\n        console.error(\"Set state error: \", error.message);\n    }\n}\nfunction $0aa9cd13c14a6e1e$export$d3dfa491819f2d3c(key) {\n    try {\n        const serializedState = localStorage.getItem(key);\n        return serializedState === null ? undefined : JSON.parse(serializedState);\n    } catch (error) {\n        console.error(\"Get state error: \", error.message);\n    }\n}\n\n});\n\n\nparcelRegister(\"jBwk9\", function(module, exports) {\n\n$parcel$export(module.exports, \"addQueue\", function () { return $e45a8be9cfe57eeb$export$2d50e6498fc49b95; });\n\nvar $UL92Z = parcelRequire(\"UL92Z\");\nconst $e45a8be9cfe57eeb$var$key = \"queue\"; // Ключ локального хранилища для просмотренных фильмов\nlet $e45a8be9cfe57eeb$var$queueMovie = (0, $UL92Z.loadLocalStorage)($e45a8be9cfe57eeb$var$key); // Загружаем сохранённые в локальном хранилище данные\nif (!$e45a8be9cfe57eeb$var$queueMovie) $e45a8be9cfe57eeb$var$queueMovie = [];\nfunction $e45a8be9cfe57eeb$export$2d50e6498fc49b95(idMovie) {\n    let i = 0; // Счётчик совпадений\n    // Проверяем, есть ли добавляемый фильм в списке для просмотра\n    $e45a8be9cfe57eeb$var$queueMovie.forEach((element)=>{\n        if (element === idMovie) i += 1;\n    });\n    if (i !== 0) return; // -> ничего не делаем.\n    else $e45a8be9cfe57eeb$var$queueMovie.push(idMovie) // -> добавляем фильм в список.\n    ;\n    // Добавляем массив фильмов в локальное хранилище.\n    (0, $UL92Z.saveLocalStorage)($e45a8be9cfe57eeb$var$key, $e45a8be9cfe57eeb$var$queueMovie);\n}\n\n});\n\nparcelRegister(\"jwloY\", function(module, exports) {\n\n$parcel$export(module.exports, \"getMovieDetails\", function () { return $e3619b6af4f38add$export$e7daf9f9f7371f9a; });\n$parcel$export(module.exports, \"fetchGetMovieDetails\", function () { return $e3619b6af4f38add$export$ab9fb40975331ede; });\n$parcel$export(module.exports, \"listGenresMovie\", function () { return $e3619b6af4f38add$export$a434111540164919; });\n\nvar $5xtVg = parcelRequire(\"5xtVg\");\nlet $e3619b6af4f38add$var$cardMarkup = \"\"; // Инициализация переменной для хранения разметки\nconst $e3619b6af4f38add$var$movieContainer = document.querySelector(\".js-modal__movie\"); // Контейнер карточки фильма\nfunction $e3619b6af4f38add$export$e7daf9f9f7371f9a(id) {\n    $e3619b6af4f38add$export$ab9fb40975331ede(id).then((response)=>{\n        $e3619b6af4f38add$var$createFilmInfo(response); // Вызываем функцию формирования информации для модального окна\n        $e3619b6af4f38add$var$movieContainer.innerHTML = $e3619b6af4f38add$var$cardMarkup; // Вставляем разметку карточки в разметку модалки\n        (0, $5xtVg.clsModal)(); // Вызываем функцию закрытия модального окна\n        (0, $5xtVg.modalClickButtons)(); // Вызываем функцию слушателей для кнопок WATCHED и QUEUE\n    }).catch((err)=>console.error(err));\n}\nfunction $e3619b6af4f38add$export$ab9fb40975331ede(id) {\n    const BASE_URL = \"https://api.themoviedb.org/3\";\n    const API_KEY = \"70e00eb52bcb7ab46f183ec1381bf837\";\n    const options = {\n        method: \"GET\",\n        headers: {\n            accept: \"application/json\"\n        }\n    };\n    return fetch(`${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`, options).then((response)=>{\n        return response.json();\n    });\n}\n// Функция формирования информации для модального окна\nfunction $e3619b6af4f38add$var$createFilmInfo({ title: title, vote_average: vote_average, vote_count: vote_count, popularity: popularity, original_title: original_title, genres: genres, poster_path: poster_path, overview: overview }) {\n    const genresMovie = $e3619b6af4f38add$export$a434111540164919(genres); // Вызываем функцию формирования массива жанров по их ID\n    return $e3619b6af4f38add$var$cardMarkup = `\n        <img class=\"modal__image\" src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"poster\" />\n        <div class=\"modal__info\">\n            <h2 class=\"modal__header\">${title.toUpperCase()}</h2>\n            <table class=\"modal__table\">\n                <tr>\n                    <td>Vote / Votes</td>\n                    <td><span class=\"modal__table--accent\">${vote_average.toFixed(1)} </span> / ${vote_count}</td>\n                </tr>\n                <tr>\n                    <td>Popularity</td>\n                    <td>${popularity.toFixed(1)}</td>\n                </tr>\n                <tr>\n                    <td>Original Title</td>\n                    <td>${original_title}</td>\n                </tr>\n                <tr>\n                    <td>Genre</td>\n                    <td>${genresMovie}</td>\n                </tr>\n            </table>\n            <h3 class=\"modal__about\">ABOUT</h3>\n            <p class=\"modal__text\">${overview}</p>\n            <div class=\"modal__buttons js-modal__buttons\">\n                <button class=\"modal__button js-button-watched\" type=\"button\">\n                    ADD TO WATCHED\n                </button>\n                <button class=\"modal__button js-button-queue\" type=\"button\">ADD TO QUEUE</button>\n            </div>\n            <!-- \\u{41A}\\u{43D}\\u{43E}\\u{43F}\\u{43A}\\u{430} \\u{437}\\u{430}\\u{43A}\\u{440}\\u{44B}\\u{442}\\u{438}\\u{44F} \\u{43C}\\u{43E}\\u{434}\\u{430}\\u{43B}\\u{44C}\\u{43D}\\u{43E}\\u{433}\\u{43E} \\u{43E}\\u{43A}\\u{43D}\\u{430} -->\n            <button type=\"button\" class=\"modal__button-close\">\n                <svg class=\"modal__icon\" data-modal-close width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M8 8L22 22\" stroke=\"black\" stroke-width=\"2\"/>\n                    <path d=\"M8 22L22 8\" stroke=\"black\" stroke-width=\"2\"/>\n                </svg>\n            </button>\n        </div>\n        `;\n}\nfunction $e3619b6af4f38add$export$a434111540164919(genres) {\n    const movieGenres = []; // Обнуление массива жанров текущего фильма\n    genres.map(({ name: name })=>{\n        movieGenres.push(name); // -> добавить название существующего жанра в массив\n    });\n    return movieGenres.join(\", \");\n}\n\n});\nparcelRegister(\"5xtVg\", function(module, exports) {\n\n$parcel$export(module.exports, \"modal\", function () { return $40873ecf3c18e122$export$96e4b36520c26a2c; });\n$parcel$export(module.exports, \"modalClickButtons\", function () { return $40873ecf3c18e122$export$a48f44ee776277b; });\n$parcel$export(module.exports, \"clsModal\", function () { return $40873ecf3c18e122$export$daa063e700c1f396; });\n\nvar $jwloY = parcelRequire(\"jwloY\");\n\nvar $jBwk9 = parcelRequire(\"jBwk9\");\n\nvar $dULZn = parcelRequire(\"dULZn\");\nconst $40873ecf3c18e122$var$filmsContainer = document.querySelector(\".js-modal\"); // Контейнер для фильмов\nconst $40873ecf3c18e122$var$modalElement = document.querySelector(\"[data-modal]\"); // Модальное окно\nconst $40873ecf3c18e122$var$backdrop = document.querySelector(\".js-modal__backdrop\"); // Фон модального окна\nlet $40873ecf3c18e122$var$idMovie = 0; // Инициализация id фильма\nfunction $40873ecf3c18e122$export$96e4b36520c26a2c() {\n    $40873ecf3c18e122$var$filmsContainer.addEventListener(\"click\", function(event) {\n        const filmElement = event.target.closest(\"[data-modal-open]\"); // Вешаем слушатель на открытие модалки\n        // Проверяем, кликнут ли элемент с атрибутом data-modal-open\n        if (!filmElement) return;\n        // Если клик произошёл по нужному элементу, открываем модальное окно\n        $40873ecf3c18e122$var$idMovie = filmElement.getAttribute(\"data-modal-open\");\n        document.body.classList.add(\"modal-open\");\n        $40873ecf3c18e122$var$modalElement.classList.remove(\"is-hidden\");\n        (0, $jwloY.getMovieDetails)($40873ecf3c18e122$var$idMovie); // Вызов функции для получения деталей фильма    \n    });\n}\nfunction $40873ecf3c18e122$export$a48f44ee776277b() {\n    const modalButtonWatched = document.querySelector(\".js-button-watched\"); // Находим кнопку WATCHED\n    const modalButtonQueue = document.querySelector(\".js-button-queue\"); // Находим кнопку QUEUE\n    modalButtonWatched.addEventListener(\"click\", ()=>(0, $dULZn.addWatched)($40873ecf3c18e122$var$idMovie)); // Ставим слушатель на кнопку WATCHED\n    modalButtonQueue.addEventListener(\"click\", ()=>(0, $jBwk9.addQueue)($40873ecf3c18e122$var$idMovie)); // Ставим слушатель на кнопку QUEUE\n}\nfunction $40873ecf3c18e122$export$daa063e700c1f396() {\n    // Выбираем тег с аттрибутом \"data-modal-close\"\n    const refs = {\n        closeModalBtn: document.querySelector(\"[data-modal-close]\"),\n        modal: document.querySelector(\"[data-modal]\")\n    };\n    refs.closeModalBtn.addEventListener(\"click\", closeModal); // Добавляем слушатель на кнопку закрытия модального окна\n    $40873ecf3c18e122$var$backdrop.addEventListener(\"click\", onBackdropClick); // Добавляем слушатель клика на бекдроп\n    window.addEventListener(\"keydown\", onEscKeyPress); // Добавляем слушатель клика на кнопку Esc\n    // Обработчик закрытия модального окна \n    function closeModal() {\n        document.body.classList.remove(\"modal-open\");\n        refs.modal.classList.add(\"is-hidden\");\n        refs.closeModalBtn.removeEventListener(\"click\", closeModal); // Снимаем слушатель с кнопки закрытия модального окна\n        $40873ecf3c18e122$var$backdrop.removeEventListener(\"click\", onBackdropClick); // Снимаем слушатель с бекдропа\n        window.removeEventListener(\"keydown\", onEscKeyPress); // Снимаем слушатель с кнопки Esc\n    }\n    // Обработчик клика в бекдроп\n    function onBackdropClick(event) {\n        if (event.currentTarget === event.target) closeModal(); // -> вызываем функцию закрытия модалки.\n    }\n    // Обработчик нажатия кнопки ESC\n    function onEscKeyPress(event) {\n        if (event.code === \"Escape\") closeModal(); // -> вызываем функцию закрытия модалки.\n    }\n}\n /*\nДанное модальное окно работает с динамическими (асинхронными) данными. Эта особенность учитывается в том,\nчто слушатели элементов открытого модального окна добавляются только после того, как данные модального окна\nбыли динамически сформированы по ответу бекэнда. \nМодальное окно имеет возможность закрываться кликом по иконке (х) в модальном окне, по бекдропу и \nпо нажатию клавиши ESC.\nПри закрытии модального окна снимаются слушатели с иконки закрытия, бекдропа и с кнопки ESC.\n*/ \n});\n\n\nparcelRequire(\"dULZn\");\nparcelRequire(\"jBwk9\");\n\nvar $UL92Z = parcelRequire(\"UL92Z\");\n\nvar $jwloY = parcelRequire(\"jwloY\");\n\nvar $5xtVg = parcelRequire(\"5xtVg\");\nlet $31ffc756efc5466c$var$arrayOfCardsMarkup = []; // Инициализация массива разметки карточек фильмов\nconst $31ffc756efc5466c$var$watchedFilms = document.querySelector(\".js-library-button-watched\"); // Находим кнопку WATCHED\nconst $31ffc756efc5466c$var$queueFilms = document.querySelector(\".js-library-button-queue\"); // Находим кнопку QUEUE\nconst $31ffc756efc5466c$var$selectedMovieContainer = document.querySelector(\".js-library-container\"); // Находим контейнер для выбранных фильмов\n$31ffc756efc5466c$var$watchedFilms.addEventListener(\"click\", $31ffc756efc5466c$var$loadWatchedFilms); // Вешаем слушатель на кнопку WATCHED\n$31ffc756efc5466c$var$queueFilms.addEventListener(\"click\", $31ffc756efc5466c$var$loadQueueFilms); // Вешаем слушатель на кнопку QUEUE\n$31ffc756efc5466c$var$loadWatchedFilms(); // Вызываем функцию вывода просмотренных фильмов\n// --------------------------------------------\n// Функция вывода просмотренных фильмов\nfunction $31ffc756efc5466c$var$loadWatchedFilms() {\n    $31ffc756efc5466c$var$watchedFilms.classList.add(\"checked\");\n    $31ffc756efc5466c$var$queueFilms.classList.remove(\"checked\");\n    let watched = (0, $UL92Z.loadLocalStorage)(\"watched\");\n    if (!watched) watched = [];\n    $31ffc756efc5466c$var$listSelectedMovie(watched); // Вызываем функцию рендера выбранных фильмов\n}\n// Функция вывода очереди фильмов на просмотр\nfunction $31ffc756efc5466c$var$loadQueueFilms() {\n    $31ffc756efc5466c$var$watchedFilms.classList.remove(\"checked\");\n    $31ffc756efc5466c$var$queueFilms.classList.add(\"checked\");\n    let queue = (0, $UL92Z.loadLocalStorage)(\"queue\");\n    if (!queue) queue = [];\n    $31ffc756efc5466c$var$listSelectedMovie(queue); // Вызываем функцию рендера выбранных фильмов\n}\n// --------------------------------------------\n// Функция рендера выбранных фильмов\nfunction $31ffc756efc5466c$var$listSelectedMovie(arrayOfMovie) {\n    $31ffc756efc5466c$var$arrayOfCardsMarkup = []; // Обнуляем массив разметки карточек фильмов\n    arrayOfMovie.map((element)=>{\n        $31ffc756efc5466c$export$a35aec2f65da4d0(element) // Запрос по каждому ID фильма\n        .then((responseCard)=>{\n            $31ffc756efc5466c$var$addCardToArray(responseCard); // Вызываем фцнкцию добавления разметки карточки в массив разметки\n            $31ffc756efc5466c$var$selectedMovieContainer.innerHTML = $31ffc756efc5466c$var$arrayOfCardsMarkup.join(\"\"); // Вставляем разметку фильмов в DOM\n            (0, $5xtVg.modal)(); // Вызываем функцию модального окна\n        });\n    });\n}\nfunction $31ffc756efc5466c$export$a35aec2f65da4d0(cards) {\n    return (0, $jwloY.fetchGetMovieDetails)(cards) // Вызываем функцию HTTP-запроса информации о конкретном фильме\n    .then((response)=>{\n        const { title: title, genres: genres, release_date: release_date, poster_path: poster_path, id: id } = response;\n        const genresMovie = (0, $jwloY.listGenresMovie)(genres); // Вызываем функцию формирования массива жанров по их ID\n        let pathToImage = ``; // Инициализация ссылки на постер фильма\n        if (poster_path === null) pathToImage = `./images/background-mobile.jpg`; // -> показать постер-заглушку\n        else pathToImage = `https://image.tmdb.org/t/p/w500${poster_path}`;\n        return `\n                <div class=\"film-container js-film-container\" data-modal-open=\"${id}\">\n                    <div class=\"image-wrapper\">\n                        <img class=\"film-image\" src=\"${pathToImage}\" />\n                    </div>\n                    <h2 class=\"film-title\">${title.toUpperCase()}</h2>\n                    <p class=\"film-data\">${genresMovie} | ${release_date.split(\"-\")[0]}</p>\n                </div>\n                `;\n    });\n}\n// Функция добавления разметки карточки в массив разметки\nfunction $31ffc756efc5466c$var$addCardToArray(card) {\n    let i = 0; // Счётчик совпадений\n    // Проверяем, есть ли добавляемый фильм в списке для просмотра\n    $31ffc756efc5466c$var$arrayOfCardsMarkup.forEach((element)=>{\n        if (element === card) i += 1;\n    });\n    if (i !== 0) return; // -> ничего не делаем.\n    else $31ffc756efc5466c$var$arrayOfCardsMarkup.push(card); // -> добавляем фильм в список.\n}\n\n\n\n})();\n//# sourceMappingURL=library.6c9859dd.js.map\n","import {saveLocalStorage, loadLocalStorage} from './localStorage';\n\nconst key = 'watched'; // Ключ локального хранилища для просмотренных фильмов\n\nlet watchedMovie = loadLocalStorage(key); // Загружаем сохранённые в локальном хранилище данные\nif (!watchedMovie) { watchedMovie = [] }; // Если данных нет - присвоить переменной пустой массив\n\nexport function addWatched(idMovie) {\n    let i = 0; // Счётчик совпадений\n\n    // Проверяем, есть ли добавляемый фильм в списке для просмотра\n    watchedMovie.forEach(element => {\n        if (element === idMovie) {\n            i += 1; \n        }\n    });\n\n    if (i !== 0) {                     // Если фильм в списке есть ->\n            return                     // -> ничего не делаем.\n        } else {                       // Иначе ->\n            watchedMovie.push(idMovie) // -> добавляем фильм в список.\n    };\n\n    // Добавляем массив фильмов в локальное хранилище.\n    saveLocalStorage(key, watchedMovie); \n};\n","export function saveLocalStorage(key, value) {\n  try {\n    const serializedState = JSON.stringify(value);\n    localStorage.setItem(key, serializedState);\n  } catch (error) {\n    console.error(\"Set state error: \", error.message);\n  }\n}\n\nexport function loadLocalStorage(key) {\n  try {\n    const serializedState = localStorage.getItem(key);\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n    console.error(\"Get state error: \", error.message);\n  }\n};","import {saveLocalStorage, loadLocalStorage} from './localStorage';\n\nconst key = 'queue'; // Ключ локального хранилища для просмотренных фильмов\n\nlet queueMovie = loadLocalStorage(key); // Загружаем сохранённые в локальном хранилище данные\nif (!queueMovie) { queueMovie = [] }; // Если данных нет - присвоить переменной пустой массив\n\nexport function addQueue(idMovie) {\n    let i = 0; // Счётчик совпадений\n\n    // Проверяем, есть ли добавляемый фильм в списке для просмотра\n    queueMovie.forEach(element => {\n        if (element === idMovie) {\n            i += 1; \n        }\n    });\n\n    if (i !== 0) {                     // Если фильм в списке есть ->\n            return                     // -> ничего не делаем.\n        } else {                       // Иначе ->\n            queueMovie.push(idMovie) // -> добавляем фильм в список.\n    };\n\n    // Добавляем массив фильмов в локальное хранилище.\n    saveLocalStorage(key, queueMovie); \n};","import { clsModal, modalClickButtons } from \"./modal\";\n\nlet cardMarkup = ''; // Инициализация переменной для хранения разметки\n\nconst movieContainer = document.querySelector('.js-modal__movie'); // Контейнер карточки фильма\n\n// Функция запроса детальной информации о фильме\nexport function getMovieDetails(id) {\n    fetchGetMovieDetails(id)\n        .then(response => {\n            createFilmInfo(response); // Вызываем функцию формирования информации для модального окна\n            movieContainer.innerHTML = cardMarkup; // Вставляем разметку карточки в разметку модалки\n            clsModal(); // Вызываем функцию закрытия модального окна\n            modalClickButtons(); // Вызываем функцию слушателей для кнопок WATCHED и QUEUE\n        })\n        .catch(err => console.error(err));\n};\n\n// Функция HTTP-запроса информации о конкретном фильме\nexport function fetchGetMovieDetails(id) {\n    const BASE_URL = 'https://api.themoviedb.org/3';\n    const API_KEY = '70e00eb52bcb7ab46f183ec1381bf837';\n    const options = {method: 'GET', headers: {accept: 'application/json'}};\n\n    return fetch(`${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`, options)\n        .then(response => { return response.json() });\n}\n\n// Функция формирования информации для модального окна\nfunction createFilmInfo({ title, vote_average, vote_count, popularity,\n    original_title, genres, poster_path, overview}) {\n\n    const genresMovie = listGenresMovie(genres); // Вызываем функцию формирования массива жанров по их ID\n    \n    return cardMarkup = `\n        <img class=\"modal__image\" src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"poster\" />\n        <div class=\"modal__info\">\n            <h2 class=\"modal__header\">${title.toUpperCase()}</h2>\n            <table class=\"modal__table\">\n                <tr>\n                    <td>Vote / Votes</td>\n                    <td><span class=\"modal__table--accent\">${vote_average.toFixed(1)} </span> / ${vote_count}</td>\n                </tr>\n                <tr>\n                    <td>Popularity</td>\n                    <td>${popularity.toFixed(1)}</td>\n                </tr>\n                <tr>\n                    <td>Original Title</td>\n                    <td>${original_title}</td>\n                </tr>\n                <tr>\n                    <td>Genre</td>\n                    <td>${genresMovie}</td>\n                </tr>\n            </table>\n            <h3 class=\"modal__about\">ABOUT</h3>\n            <p class=\"modal__text\">${overview}</p>\n            <div class=\"modal__buttons js-modal__buttons\">\n                <button class=\"modal__button js-button-watched\" type=\"button\">\n                    ADD TO WATCHED\n                </button>\n                <button class=\"modal__button js-button-queue\" type=\"button\">ADD TO QUEUE</button>\n            </div>\n            <!-- Кнопка закрытия модального окна -->\n            <button type=\"button\" class=\"modal__button-close\">\n                <svg class=\"modal__icon\" data-modal-close width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M8 8L22 22\" stroke=\"black\" stroke-width=\"2\"/>\n                    <path d=\"M8 22L22 8\" stroke=\"black\" stroke-width=\"2\"/>\n                </svg>\n            </button>\n        </div>\n        `;\n    \n};\n\n// Функция получения жанров фильма\nexport function listGenresMovie(genres) {\n    const movieGenres = []; // Обнуление массива жанров текущего фильма\n    genres.map(({ name }) => {  // Перебераем массив существующих жанров  \n        movieGenres.push(name); // -> добавить название существующего жанра в массив\n    });\n    return movieGenres.join(', ');\n};","import { getMovieDetails } from './getMovieDetails_API';\nimport { addQueue } from './queue';\nimport { addWatched } from './watched';\n\nconst filmsContainer = document.querySelector('.js-modal'); // Контейнер для фильмов\nconst modalElement = document.querySelector(\"[data-modal]\"); // Модальное окно\nconst backdrop = document.querySelector('.js-modal__backdrop'); // Фон модального окна\n\nlet idMovie = 0; // Инициализация id фильма\n\n// Обработчик открытия модального окна через всплытия событий.\nexport function modal() {\n  \n  filmsContainer.addEventListener('click', function(event) {\n    const filmElement = event.target.closest('[data-modal-open]'); // Вешаем слушатель на открытие модалки\n    \n    // Проверяем, кликнут ли элемент с атрибутом data-modal-open\n    if (!filmElement) return;\n\n    // Если клик произошёл по нужному элементу, открываем модальное окно\n    idMovie = filmElement.getAttribute('data-modal-open');\n    document.body.classList.add(\"modal-open\");\n    modalElement.classList.remove(\"is-hidden\");\n    \n    getMovieDetails(idMovie); // Вызов функции для получения деталей фильма    \n  });\n};\n\n// Функция обработки кликов по кнопкам WATCHED и QUEUE в модальном окне \nexport function modalClickButtons() {\n  const modalButtonWatched = document.querySelector('.js-button-watched'); // Находим кнопку WATCHED\n  const modalButtonQueue = document.querySelector('.js-button-queue'); // Находим кнопку QUEUE\n  modalButtonWatched.addEventListener('click', () => addWatched(idMovie)); // Ставим слушатель на кнопку WATCHED\n  modalButtonQueue.addEventListener('click', () => addQueue(idMovie)); // Ставим слушатель на кнопку QUEUE\n}\n\n// Функция закрытия модального окна\nexport function clsModal() {\n  // Выбираем тег с аттрибутом \"data-modal-close\"\n  const refs = {\n    closeModalBtn: document.querySelector(\"[data-modal-close]\"),\n    modal: document.querySelector(\"[data-modal]\"),\n  };\n\n  refs.closeModalBtn.addEventListener(\"click\", closeModal); // Добавляем слушатель на кнопку закрытия модального окна\n  backdrop.addEventListener('click', onBackdropClick); // Добавляем слушатель клика на бекдроп\n  window.addEventListener('keydown', onEscKeyPress); // Добавляем слушатель клика на кнопку Esc\n\n  // Обработчик закрытия модального окна \n  function closeModal() {\n    document.body.classList.remove(\"modal-open\");\n    refs.modal.classList.add(\"is-hidden\");\n    refs.closeModalBtn.removeEventListener(\"click\", closeModal); // Снимаем слушатель с кнопки закрытия модального окна\n    backdrop.removeEventListener('click', onBackdropClick); // Снимаем слушатель с бекдропа\n    window.removeEventListener('keydown', onEscKeyPress); // Снимаем слушатель с кнопки Esc\n  };\n\n  // Обработчик клика в бекдроп\n  function onBackdropClick (event) {\n    if (event.currentTarget === event.target) { // Если кликнули в бекдроп ->\n      closeModal(); // -> вызываем функцию закрытия модалки.\n    }\n  };\n\n  // Обработчик нажатия кнопки ESC\n  function onEscKeyPress(event) {\n    if (event.code === 'Escape') { // если нажата клавиша Esc ->\n      closeModal(); // -> вызываем функцию закрытия модалки.\n    } \n  };\n};\n\n/*\nДанное модальное окно работает с динамическими (асинхронными) данными. Эта особенность учитывается в том,\nчто слушатели элементов открытого модального окна добавляются только после того, как данные модального окна\nбыли динамически сформированы по ответу бекэнда. \nМодальное окно имеет возможность закрываться кликом по иконке (х) в модальном окне, по бекдропу и \nпо нажатию клавиши ESC.\nПри закрытии модального окна снимаются слушатели с иконки закрытия, бекдропа и с кнопки ESC.\n*/","import * as watched from './js/watched';\nimport * as queue from './js/queue';\nimport * as selectedMovie from './js/library/selectedMovie';\n","import { loadLocalStorage } from \"../localStorage\";\nimport { fetchGetMovieDetails, listGenresMovie } from \"../getMovieDetails_API\";\nimport { modal } from \"../modal\";\n\nlet arrayOfCardsMarkup = []; // Инициализация массива разметки карточек фильмов\n\nconst watchedFilms = document.querySelector('.js-library-button-watched'); // Находим кнопку WATCHED\nconst queueFilms = document.querySelector('.js-library-button-queue'); // Находим кнопку QUEUE\nconst selectedMovieContainer = document.querySelector('.js-library-container'); // Находим контейнер для выбранных фильмов\n\nwatchedFilms.addEventListener('click', loadWatchedFilms); // Вешаем слушатель на кнопку WATCHED\nqueueFilms.addEventListener('click', loadQueueFilms); // Вешаем слушатель на кнопку QUEUE\n\nloadWatchedFilms(); // Вызываем функцию вывода просмотренных фильмов\n\n// --------------------------------------------\n\n// Функция вывода просмотренных фильмов\nfunction loadWatchedFilms() {\n    watchedFilms.classList.add('checked');\n    queueFilms.classList.remove('checked');\n\n    let watched = loadLocalStorage('watched');\n    if (!watched) { watched = [] }; // Если данных нет - присвоить переменной пустой массив\n    listSelectedMovie(watched); // Вызываем функцию рендера выбранных фильмов\n};\n\n// Функция вывода очереди фильмов на просмотр\nfunction loadQueueFilms() {\n    watchedFilms.classList.remove('checked');\n    queueFilms.classList.add('checked');\n\n    let queue = loadLocalStorage('queue');\n    if (!queue) { queue = [] }; // Если данных нет - присвоить переменной пустой массив\n    listSelectedMovie(queue); // Вызываем функцию рендера выбранных фильмов\n};\n\n// --------------------------------------------\n\n// Функция рендера выбранных фильмов\nfunction listSelectedMovie(arrayOfMovie) {\n    arrayOfCardsMarkup = []; // Обнуляем массив разметки карточек фильмов\n    arrayOfMovie.map(element => {   // Перебираем массив ID фильмов\n        createFilmCards(element)    // Запрос по каждому ID фильма\n            .then(responseCard => { // Ответ по запросу\n                addCardToArray(responseCard); // Вызываем фцнкцию добавления разметки карточки в массив разметки\n                selectedMovieContainer.innerHTML = arrayOfCardsMarkup.join(''); // Вставляем разметку фильмов в DOM\n                modal(); // Вызываем функцию модального окна\n            });\n    });\n}\n\n// Функция формирования карточек фильмов\nexport function createFilmCards(cards) {\n    return fetchGetMovieDetails(cards) // Вызываем функцию HTTP-запроса информации о конкретном фильме\n        .then(response => {\n            const { title, genres, release_date, poster_path, id } = response;\n            const genresMovie = listGenresMovie(genres); // Вызываем функцию формирования массива жанров по их ID\n\n                let pathToImage = ``; // Инициализация ссылки на постер фильма\n                if (poster_path === null) { // Если в ответе бекэнда нет ссылки на постер фильма ->\n                    pathToImage = `./images/background-mobile.jpg`; // -> показать постер-заглушку\n                } else {\n                    pathToImage = `https://image.tmdb.org/t/p/w500${poster_path}`;\n                };\n\n                return `\n                <div class=\"film-container js-film-container\" data-modal-open=\"${id}\">\n                    <div class=\"image-wrapper\">\n                        <img class=\"film-image\" src=\"${pathToImage}\" />\n                    </div>\n                    <h2 class=\"film-title\">${title.toUpperCase()}</h2>\n                    <p class=\"film-data\">${genresMovie} | ${release_date.split('-')[0]}</p>\n                </div>\n                `;\n        });\n};\n\n// Функция добавления разметки карточки в массив разметки\nfunction addCardToArray(card) {\n    let i = 0; // Счётчик совпадений\n\n    // Проверяем, есть ли добавляемый фильм в списке для просмотра\n    arrayOfCardsMarkup.forEach(element => {\n        if (element === card) {\n            i += 1; \n        }\n    });\n\n    if (i !== 0) {                     // Если фильм в списке есть ->\n            return                     // -> ничего не делаем.\n        } else {                       // Иначе ->\n            arrayOfCardsMarkup.push(card); // -> добавляем фильм в список.\n    };\n};"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$a215baf1061f969f$export$96f7c0dfb8dc6322","$UL92Z","$a215baf1061f969f$var$key","$a215baf1061f969f$var$watchedMovie","loadLocalStorage","idMovie","i","forEach","element","push","saveLocalStorage","$0aa9cd13c14a6e1e$export$f3928fa528b0a11c","key","value","serializedState","JSON","stringify","localStorage","setItem","error","console","message","$0aa9cd13c14a6e1e$export$d3dfa491819f2d3c","getItem","undefined","parse","$e45a8be9cfe57eeb$export$2d50e6498fc49b95","$e45a8be9cfe57eeb$var$key","$e45a8be9cfe57eeb$var$queueMovie","$e3619b6af4f38add$export$e7daf9f9f7371f9a","$e3619b6af4f38add$export$ab9fb40975331ede","$e3619b6af4f38add$export$a434111540164919","$5xtVg","$e3619b6af4f38add$var$cardMarkup","$e3619b6af4f38add$var$movieContainer","document","querySelector","then","response","$e3619b6af4f38add$var$createFilmInfo","title","vote_average","vote_count","popularity","original_title","genres","poster_path","overview","genresMovie","toUpperCase","toFixed","innerHTML","clsModal","modalClickButtons","catch","fetch","method","headers","accept","json","movieGenres","map","name","join","$40873ecf3c18e122$export$96e4b36520c26a2c","$40873ecf3c18e122$export$a48f44ee776277b","$40873ecf3c18e122$export$daa063e700c1f396","$jwloY","$jBwk9","$dULZn","$40873ecf3c18e122$var$filmsContainer","$40873ecf3c18e122$var$modalElement","$40873ecf3c18e122$var$backdrop","$40873ecf3c18e122$var$idMovie","addEventListener","event","filmElement","target","closest","getAttribute","body","classList","add","remove","getMovieDetails","modalButtonWatched","modalButtonQueue","addWatched","addQueue","refs","closeModalBtn","modal","closeModal","removeEventListener","onBackdropClick","onEscKeyPress","currentTarget","$31ffc756efc5466c$var$arrayOfCardsMarkup","$31ffc756efc5466c$var$watchedFilms","$31ffc756efc5466c$var$queueFilms","$31ffc756efc5466c$var$selectedMovieContainer","$31ffc756efc5466c$var$loadWatchedFilms","watched","$31ffc756efc5466c$var$listSelectedMovie","arrayOfMovie","$31ffc756efc5466c$export$a35aec2f65da4d0","fetchGetMovieDetails","release_date","listGenresMovie","pathToImage","split","responseCard","queue"],"version":3,"file":"library.6c9859dd.js.map"}