{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,Q,W,O,C,G,E,E,O,C,oB,W,O,C,G,E,E,O,C,W,W,O,C,G,I,E,E,S,E,E,S,E,E,SCIA,IAAM,EAAiB,SAAS,aAAa,CAAC,aACxC,EAAe,SAAS,aAAa,CAAC,gBACtC,EAAW,SAAS,aAAa,CAAC,uBAEpC,EAAU,EAGP,SAAS,IAEd,EAAe,gBAAgB,CAAC,QAAS,SAAS,CAAK,EACrD,IAAM,EAAc,EAAM,MAAM,CAAC,OAAO,CAAC,qBAGpC,IAGL,EAAU,EAAY,YAAY,CAAC,mBACnC,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,cAC5B,EAAa,SAAS,CAAC,MAAM,CAAC,aAE9B,AAAA,CAAA,EAAA,EAAA,eAAc,AAAd,EAAgB,GAClB,EACF,CAGO,SAAS,IACd,IAAM,EAAqB,SAAS,aAAa,CAAC,sBAC5C,EAAmB,SAAS,aAAa,CAAC,oBAChD,EAAmB,gBAAgB,CAAC,QAAS,IAAM,AAAA,CAAA,EAAA,EAAA,UAAS,AAAT,EAAW,IAC9D,EAAiB,gBAAgB,CAAC,QAAS,IAAM,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,GAC5D,CAGO,SAAS,IAEd,IAAM,EAAO,CACX,cAAe,SAAS,aAAa,CAAC,sBACtC,MAAO,SAAS,aAAa,CAAC,eAChC,EAOA,SAAS,IACP,SAAS,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,cAC/B,EAAK,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,aACzB,EAAK,aAAa,CAAC,mBAAmB,CAAC,QAAS,GAChD,EAAS,mBAAmB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","sources":["<anon>","src/js/modal.js","src/js/getMovieDetails_API.js","src/js/queue.js","src/js/localStorage.js","src/js/watched.js","src/index.js","src/js/index/getMovieList_API.js","src/js/pagination.js","src/js/index/getSearchMovie_API.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire4cee\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire4cee\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"bTcpz\", function(module, exports) {\n\n$parcel$export(module.exports, \"modal\", function () { return $8a7e756c566dd1ea$export$96e4b36520c26a2c; });\n$parcel$export(module.exports, \"modalClickButtons\", function () { return $8a7e756c566dd1ea$export$a48f44ee776277b; });\n$parcel$export(module.exports, \"clsModal\", function () { return $8a7e756c566dd1ea$export$daa063e700c1f396; });\n\nvar $10w4c = parcelRequire(\"10w4c\");\n\nvar $edpgF = parcelRequire(\"edpgF\");\n\nvar $9IiBV = parcelRequire(\"9IiBV\");\nconst $8a7e756c566dd1ea$var$filmsContainer = document.querySelector(\".js-modal\"); // Контейнер для фильмов\nconst $8a7e756c566dd1ea$var$modalElement = document.querySelector(\"[data-modal]\"); // Модальное окно\nconst $8a7e756c566dd1ea$var$backdrop = document.querySelector(\".js-modal__backdrop\"); // Фон модального окна\nlet $8a7e756c566dd1ea$var$idMovie = 0; // Инициализация id фильма\nfunction $8a7e756c566dd1ea$export$96e4b36520c26a2c() {\n    $8a7e756c566dd1ea$var$filmsContainer.addEventListener(\"click\", function(event) {\n        const filmElement = event.target.closest(\"[data-modal-open]\"); // Вешаем слушатель на открытие модалки\n        // Проверяем, кликнут ли элемент с атрибутом data-modal-open\n        if (!filmElement) return;\n        // Если клик произошёл по нужному элементу, открываем модальное окно\n        $8a7e756c566dd1ea$var$idMovie = filmElement.getAttribute(\"data-modal-open\");\n        document.body.classList.add(\"modal-open\");\n        $8a7e756c566dd1ea$var$modalElement.classList.remove(\"is-hidden\");\n        (0, $10w4c.getMovieDetails)($8a7e756c566dd1ea$var$idMovie); // Вызов функции для получения деталей фильма    \n    });\n}\nfunction $8a7e756c566dd1ea$export$a48f44ee776277b() {\n    const modalButtonWatched = document.querySelector(\".js-button-watched\"); // Находим кнопку WATCHED\n    const modalButtonQueue = document.querySelector(\".js-button-queue\"); // Находим кнопку QUEUE\n    modalButtonWatched.addEventListener(\"click\", ()=>(0, $9IiBV.addWatched)($8a7e756c566dd1ea$var$idMovie)); // Ставим слушатель на кнопку WATCHED\n    modalButtonQueue.addEventListener(\"click\", ()=>(0, $edpgF.addQueue)($8a7e756c566dd1ea$var$idMovie)); // Ставим слушатель на кнопку QUEUE\n}\nfunction $8a7e756c566dd1ea$export$daa063e700c1f396() {\n    // Выбираем тег с аттрибутом \"data-modal-close\"\n    const refs = {\n        closeModalBtn: document.querySelector(\"[data-modal-close]\"),\n        modal: document.querySelector(\"[data-modal]\")\n    };\n    refs.closeModalBtn.addEventListener(\"click\", closeModal); // Добавляем слушатель на кнопку закрытия модального окна\n    $8a7e756c566dd1ea$var$backdrop.addEventListener(\"click\", onBackdropClick); // Добавляем слушатель клика на бекдроп\n    window.addEventListener(\"keydown\", onEscKeyPress); // Добавляем слушатель клика на кнопку Esc\n    // Обработчик закрытия модального окна \n    function closeModal() {\n        document.body.classList.remove(\"modal-open\");\n        refs.modal.classList.add(\"is-hidden\");\n        refs.closeModalBtn.removeEventListener(\"click\", closeModal); // Снимаем слушатель с кнопки закрытия модального окна\n        $8a7e756c566dd1ea$var$backdrop.removeEventListener(\"click\", onBackdropClick); // Снимаем слушатель с бекдропа\n        window.removeEventListener(\"keydown\", onEscKeyPress); // Снимаем слушатель с кнопки Esc\n    }\n    // Обработчик клика в бекдроп\n    function onBackdropClick(event) {\n        if (event.currentTarget === event.target) closeModal(); // -> вызываем функцию закрытия модалки.\n    }\n    // Обработчик нажатия кнопки ESC\n    function onEscKeyPress(event) {\n        if (event.code === \"Escape\") closeModal(); // -> вызываем функцию закрытия модалки.\n    }\n}\n /*\nДанное модальное окно работает с динамическими (асинхронными) данными. Эта особенность учитывается в том,\nчто слушатели элементов открытого модального окна добавляются только после того, как данные модального окна\nбыли динамически сформированы по ответу бекэнда. \nМодальное окно имеет возможность закрываться кликом по иконке (х) в модальном окне, по бекдропу и \nпо нажатию клавиши ESC.\nПри закрытии модального окна снимаются слушатели с иконки закрытия, бекдропа и с кнопки ESC.\n*/ \n});\nparcelRegister(\"10w4c\", function(module, exports) {\n\n$parcel$export(module.exports, \"getMovieDetails\", function () { return $0bbeaa56167f8406$export$e7daf9f9f7371f9a; });\n$parcel$export(module.exports, \"fetchGetMovieDetails\", function () { return $0bbeaa56167f8406$export$ab9fb40975331ede; });\n$parcel$export(module.exports, \"listGenresMovie\", function () { return $0bbeaa56167f8406$export$a434111540164919; });\n\nvar $bTcpz = parcelRequire(\"bTcpz\");\nconst $0bbeaa56167f8406$var$movieContainer = document.querySelector(\".js-modal__movie\"); // Контейнер карточки фильма\nfunction $0bbeaa56167f8406$export$e7daf9f9f7371f9a(id) {\n    $0bbeaa56167f8406$export$ab9fb40975331ede(id).then((response)=>{\n        $0bbeaa56167f8406$var$createFilmInfo(response); // Вызываем функцию формирования информации для модального окна\n        $0bbeaa56167f8406$var$movieContainer.innerHTML = cardMarkup; // Вставляем разметку карточки в разметку модалки\n        (0, $bTcpz.clsModal)(); // Вызываем функцию закрытия модального окна\n        (0, $bTcpz.modalClickButtons)(); // Вызываем функцию слушателей для кнопок WATCHED и QUEUE\n    }).catch((err)=>console.error(err));\n}\nfunction $0bbeaa56167f8406$export$ab9fb40975331ede(id) {\n    const BASE_URL = \"https://api.themoviedb.org/3\";\n    const API_KEY = \"70e00eb52bcb7ab46f183ec1381bf837\";\n    const options = {\n        method: \"GET\",\n        headers: {\n            accept: \"application/json\"\n        }\n    };\n    return fetch(`${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`, options).then((response)=>{\n        return response.json();\n    });\n}\n// Функция формирования информации для модального окна\nfunction $0bbeaa56167f8406$var$createFilmInfo({ title: title, vote_average: vote_average, vote_count: vote_count, popularity: popularity, original_title: original_title, genres: genres, poster_path: poster_path, overview: overview }) {\n    const genresMovie = $0bbeaa56167f8406$export$a434111540164919(genres); // Вызываем функцию формирования массива жанров по их ID\n    return cardMarkup = `\n        <img class=\"modal__image\" src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"poster\" />\n        <div class=\"modal__info\">\n            <h2 class=\"modal__header\">${title.toUpperCase()}</h2>\n            <table class=\"modal__table\">\n                <tr>\n                    <td>Vote / Votes</td>\n                    <td><span class=\"modal__table--accent\">${vote_average.toFixed(1)} </span> / ${vote_count}</td>\n                </tr>\n                <tr>\n                    <td>Popularity</td>\n                    <td>${popularity.toFixed(1)}</td>\n                </tr>\n                <tr>\n                    <td>Original Title</td>\n                    <td>${original_title}</td>\n                </tr>\n                <tr>\n                    <td>Genre</td>\n                    <td>${genresMovie}</td>\n                </tr>\n            </table>\n            <h3 class=\"modal__about\">ABOUT</h3>\n            <p class=\"modal__text\">${overview}</p>\n            <div class=\"modal__buttons js-modal__buttons\">\n                <button class=\"modal__button js-button-watched\" type=\"button\">\n                    ADD TO WATCHED\n                </button>\n                <button class=\"modal__button js-button-queue\" type=\"button\">ADD TO QUEUE</button>\n            </div>\n            <!-- \\u{41A}\\u{43D}\\u{43E}\\u{43F}\\u{43A}\\u{430} \\u{437}\\u{430}\\u{43A}\\u{440}\\u{44B}\\u{442}\\u{438}\\u{44F} \\u{43C}\\u{43E}\\u{434}\\u{430}\\u{43B}\\u{44C}\\u{43D}\\u{43E}\\u{433}\\u{43E} \\u{43E}\\u{43A}\\u{43D}\\u{430} -->\n            <button type=\"button\" class=\"modal__button-close\">\n                <svg class=\"modal__icon\" data-modal-close width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M8 8L22 22\" stroke=\"black\" stroke-width=\"2\"/>\n                    <path d=\"M8 22L22 8\" stroke=\"black\" stroke-width=\"2\"/>\n                </svg>\n            </button>\n        </div>\n        `;\n}\nfunction $0bbeaa56167f8406$export$a434111540164919(genres) {\n    const movieGenres = []; // Обнуление массива жанров текущего фильма\n    genres.map(({ name: name })=>{\n        movieGenres.push(name); // -> добавить название существующего жанра в массив\n    });\n    return movieGenres.join(\", \");\n}\n\n});\n\nparcelRegister(\"edpgF\", function(module, exports) {\n\n$parcel$export(module.exports, \"addQueue\", function () { return $a595e1401ec493e7$export$2d50e6498fc49b95; });\n\nvar $31u3U = parcelRequire(\"31u3U\");\nconst $a595e1401ec493e7$var$key = \"queue\"; // Ключ локального хранилища для просмотренных фильмов\nlet $a595e1401ec493e7$var$queueMovie = (0, $31u3U.loadLocalStorage)($a595e1401ec493e7$var$key); // Загружаем сохранённые в локальном хранилище данные\nif (!$a595e1401ec493e7$var$queueMovie) $a595e1401ec493e7$var$queueMovie = [];\nfunction $a595e1401ec493e7$export$2d50e6498fc49b95(idMovie) {\n    let i = 0; // Счётчик совпадений\n    // Проверяем, есть ли добавляемый фильм в списке для просмотра\n    $a595e1401ec493e7$var$queueMovie.forEach((element)=>{\n        if (element === idMovie) i += 1;\n    });\n    if (i !== 0) return; // -> ничего не делаем.\n    else $a595e1401ec493e7$var$queueMovie.push(idMovie) // -> добавляем фильм в список.\n    ;\n    // Добавляем массив фильмов в локальное хранилище.\n    (0, $31u3U.saveLocalStorage)($a595e1401ec493e7$var$key, $a595e1401ec493e7$var$queueMovie);\n}\n\n});\nparcelRegister(\"31u3U\", function(module, exports) {\n\n$parcel$export(module.exports, \"saveLocalStorage\", function () { return $2338c8cd734f85a6$export$f3928fa528b0a11c; });\n$parcel$export(module.exports, \"loadLocalStorage\", function () { return $2338c8cd734f85a6$export$d3dfa491819f2d3c; });\nfunction $2338c8cd734f85a6$export$f3928fa528b0a11c(key, value) {\n    try {\n        const serializedState = JSON.stringify(value);\n        localStorage.setItem(key, serializedState);\n    } catch (error) {\n        console.error(\"Set state error: \", error.message);\n    }\n}\nfunction $2338c8cd734f85a6$export$d3dfa491819f2d3c(key) {\n    try {\n        const serializedState = localStorage.getItem(key);\n        return serializedState === null ? undefined : JSON.parse(serializedState);\n    } catch (error) {\n        console.error(\"Get state error: \", error.message);\n    }\n}\n\n});\n\n\nparcelRegister(\"9IiBV\", function(module, exports) {\n\n$parcel$export(module.exports, \"addWatched\", function () { return $7126a8cfa5cf9b17$export$96f7c0dfb8dc6322; });\n\nvar $31u3U = parcelRequire(\"31u3U\");\nconst $7126a8cfa5cf9b17$var$key = \"watched\"; // Ключ локального хранилища для просмотренных фильмов\nlet $7126a8cfa5cf9b17$var$watchedMovie = (0, $31u3U.loadLocalStorage)($7126a8cfa5cf9b17$var$key); // Загружаем сохранённые в локальном хранилище данные\nif (!$7126a8cfa5cf9b17$var$watchedMovie) $7126a8cfa5cf9b17$var$watchedMovie = [];\nfunction $7126a8cfa5cf9b17$export$96f7c0dfb8dc6322(idMovie) {\n    let i = 0; // Счётчик совпадений\n    // Проверяем, есть ли добавляемый фильм в списке для просмотра\n    $7126a8cfa5cf9b17$var$watchedMovie.forEach((element)=>{\n        if (element === idMovie) i += 1;\n    });\n    if (i !== 0) return; // -> ничего не делаем.\n    else $7126a8cfa5cf9b17$var$watchedMovie.push(idMovie) // -> добавляем фильм в список.\n    ;\n    // Добавляем массив фильмов в локальное хранилище.\n    (0, $31u3U.saveLocalStorage)($7126a8cfa5cf9b17$var$key, $7126a8cfa5cf9b17$var$watchedMovie);\n}\n\n});\n\n\n\n\n\n\nvar $bTcpz = parcelRequire(\"bTcpz\");\nconst $5fd06ee069b1166a$var$filmsContainer = document.querySelector(\".js-films-container\"); // Нашли контейнер по классу\nconst $5fd06ee069b1166a$var$searchForm = document.querySelector(\".js-search-form\"); // Нашли форму поиска по классу\n$5fd06ee069b1166a$var$searchForm.addEventListener(\"submit\", $5fd06ee069b1166a$var$onSearch); // Вешаем слушатель на кнопку поиска?\nlet $5fd06ee069b1166a$export$a42b7999c668c0b0 = false; // Флаг \"есть ли запрос пользователя\"\nlet $5fd06ee069b1166a$export$737148d43a127671 = \"\"; // Переменная для хранения запроса пользователя\nconst $5fd06ee069b1166a$var$page = 1; // Стартовая страница пагинации ответа на запрос\n// Функция обработки клика по кнопке \"Искать\"\nfunction $5fd06ee069b1166a$var$onSearch(evt) {\n    evt.preventDefault(); // Запрет на перегрузку страницы\n    $5fd06ee069b1166a$export$737148d43a127671 = evt.target[0].value; // Определяем данные в инпуте формы\n    $5fd06ee069b1166a$var$fetchSearchMovie($5fd06ee069b1166a$export$737148d43a127671, $5fd06ee069b1166a$var$page) // Вызов функции запроса на сервер по названию фильма\n    .then((response)=>{\n        $5fd06ee069b1166a$export$a42b7999c668c0b0 = true; // Флаг наличия запроса пользователя (для пагинации)\n        if (response.results.length === 0) $5fd06ee069b1166a$var$alertMessage();\n        (0, $0aca34fd57b663fe$export$a35aec2f65da4d0)(response.results); // Вызываем функцию формирования карточек фильмов из getMovieList_API\n        $5fd06ee069b1166a$var$filmsContainer.innerHTML = (0, $0aca34fd57b663fe$export$baa5776c5295c095); // Вставляем разметку карточек в разметку контейнера\n        (0, $bTcpz.modal)(); // Вызываем функцию модального окна\n        (0, $1bab9c519cfa82bc$export$8454457683f90105)(response.total_pages, $5fd06ee069b1166a$var$page); // Вызываем функцию пагинации\n    }) // Формирование карточки фильма если ответ пришел\n    .catch((error)=>console.log(error)) // Обработка ошибок запроса\n    .finally(()=>$5fd06ee069b1166a$var$searchForm.reset()); // Сбросить форму поиска после запроса\n}\n// Функция запроса на сервер по названию фильма\nfunction $5fd06ee069b1166a$var$fetchSearchMovie(movieTitle, page) {\n    const BASE_URL = \"https://api.themoviedb.org/3\";\n    const API_KEY = \"70e00eb52bcb7ab46f183ec1381bf837\";\n    const options = {\n        method: \"GET\",\n        headers: {\n            accept: \"application/json\"\n        }\n    };\n    return fetch(`${BASE_URL}/search/movie?query=${movieTitle}&api_key=${API_KEY}&include_adult=false&language=en-US&page=${page}`, options).then((response)=>{\n        return response.json();\n    }); // Возврат распарсенного ответа и самого запроса\n}\nfunction $5fd06ee069b1166a$export$9fecbcbdf80f6d27(page) {\n    $5fd06ee069b1166a$var$fetchSearchMovie($5fd06ee069b1166a$export$737148d43a127671, page) // Вызов функции запроса на сервер по названию фильма\n    .then((response)=>{\n        $5fd06ee069b1166a$export$a42b7999c668c0b0 = true; // Флаг наличия запроса пользователя\n        (0, $0aca34fd57b663fe$export$a35aec2f65da4d0)(response.results); // Вызываем функцию формирования карточек фильмов из getMovieList_API\n        $5fd06ee069b1166a$var$filmsContainer.innerHTML = (0, $0aca34fd57b663fe$export$baa5776c5295c095); // Вставляем разметку карточек в разметку контейнера\n    }) // Формирование карточки фильма если ответ пришел\n    .catch((error)=>console.log(error)) // Обработка ошибок запроса\n    ;\n}\n// Функция вывода предупреждения\nfunction $5fd06ee069b1166a$var$alertMessage() {\n    const alert = document.querySelector(\".js-search-message\"); // Нашли сообщение по классу\n    alert.classList.add(\"show-message\"); // Показать сообщение об ошибке поиска\n    setTimeout(()=>{\n        alert.classList.remove(\"show-message\");\n    }, 4500); // Через 4,5 секунды убрать сообщение об ошибке поиска\n}\n\n\nconst $1bab9c519cfa82bc$var$ulTag = document.querySelector(\".js-pagination-list\"); // Выбираем список кнопок пагинации.\nconst $1bab9c519cfa82bc$var$paginationContainer = document.querySelector(\".js-pagination-container\"); // Выбираем список кнопок пагинации.\nfunction $1bab9c519cfa82bc$export$8454457683f90105(totalPages, page) {\n    // Проверка необходимости рендерить блок пагинации\n    if (totalPages < 2 || (0, $5fd06ee069b1166a$export$a42b7999c668c0b0) && (0, $5fd06ee069b1166a$export$737148d43a127671) == []) {\n        $1bab9c519cfa82bc$var$paginationContainer.classList.add(\"hidden\");\n        return;\n    }\n    // -> (т.е. нет данных) - пагинацию не рендерить (добавить в контейнер пагинации класс 'hidden')\n    let liTag = \"\"; // Инициализация пустого тега <li> для избежания появления \"undefined\".\n    let activeLi = \"\"; // Инициализация активного тега <li> для избежания появления \"undefined\".\n    let beforePage = page - 2; // Начало диапазона кнопок пагинации.\n    let afterPage = page + 2; // Конец диапазона кнопок пагинации.\n    if (page > 1) // liTag += `<li class=\"btn prev\" onClick='element(${totalPages}, ${page - 1})'>L</li>`;\n    liTag += `<li class=\"btn prev\" onClick='element(${totalPages}, ${page - 1})'>\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M12.6666 8H3.33325\" stroke=\"black\" stroke-width=\"1.33333\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M7.99992 12.6667L3.33325 8.00004L7.99992 3.33337\" stroke=\"black\" stroke-width=\"1.33333\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        </svg></li>`;\n    if (window.innerWidth > 767) {\n        if (page > 3) {\n            liTag += `<li class=\"numb\" onClick='element(${totalPages}, 1)'><span>1</span></li>`;\n            if (page > 4) liTag += `<li class=\"dots\"><span>...</span></li>`;\n        }\n    }\n    // Сколько номеров рендерить до текущей страницы\n    if (page === totalPages) beforePage = beforePage - 2;\n    else if (page === totalPages - 1) beforePage = beforePage - 1;\n    // Сколько номеров рендерить после текущей страницы\n    if (page === 1) afterPage = afterPage + 2;\n    else if (page === 2) afterPage = afterPage + 1;\n    for(let pageLenght = beforePage; pageLenght <= afterPage; pageLenght += 1){\n        if (pageLenght > totalPages || pageLenght < 1) continue;\n        // - не формировать цифры пагинации. \n        if (pageLenght === 0) pageLenght += 1;\n        if (pageLenght === page) {\n            activeLi = \"active\"; // Если номер текуще страницы равен pageLenght - добавить стиль active\n            page = pageLenght; // Текущая страница - это активная страница\n            if (0, $5fd06ee069b1166a$export$a42b7999c668c0b0) (0, $5fd06ee069b1166a$export$9fecbcbdf80f6d27)(page); // -> пагинация по запросу пользователя\n            else (0, $0aca34fd57b663fe$export$31c655352a77bc1a)(page); // -> пагинация по начальному списку фильмов\n        } else activeLi = \"\";\n        liTag += `<li class=\"numb ${activeLi}\" onClick='element(${totalPages}, ${pageLenght})'><span>${pageLenght}</span></li>`; // Перелистывание\n    // страниц при клике по цифрам пагинации.\n    }\n    if (window.innerWidth > 767) {\n        if (page < totalPages - 2) {\n            // страницу с номером общего количества страниц.\n            if (page < totalPages - 3) liTag += `<li class=\"dots\"><span>...</span></li>`;\n            liTag += `<li class=\"numb\" onClick='element(${totalPages}, ${totalPages})'><span>${totalPages}</span></li>`;\n        }\n    }\n    if (page < totalPages) liTag += `<li class=\"btn next\" onclick='element(${totalPages}, ${page + 1})'>\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M3.33341 8H12.6667\" stroke=\"black\" stroke-width=\"1.33333\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M8.00008 12.6667L12.6667 8.00004L8.00008 3.33337\" stroke=\"black\" stroke-width=\"1.33333\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        </svg></li>`;\n    $1bab9c519cfa82bc$var$ulTag.innerHTML = liTag; // Добавляем теги в разметку пагинации.\n}\n// Добавление функции element в глобальную область видимости.\nwindow.element = $1bab9c519cfa82bc$export$8454457683f90105; // window.innerWidth - определение ширины вьюпорта в JS\n\n\n\nvar $bTcpz = parcelRequire(\"bTcpz\");\nconst $0aca34fd57b663fe$var$listOfGenres = [\n    {\n        id: 28,\n        name: \"Action\"\n    },\n    {\n        id: 12,\n        name: \"Adventure\"\n    },\n    {\n        id: 16,\n        name: \"Animation\"\n    },\n    {\n        id: 35,\n        name: \"Comedy\"\n    },\n    {\n        id: 80,\n        name: \"Crime\"\n    },\n    {\n        id: 99,\n        name: \"Documentary\"\n    },\n    {\n        id: 18,\n        name: \"Drama\"\n    },\n    {\n        id: 10751,\n        name: \"Family\"\n    },\n    {\n        id: 14,\n        name: \"Fantasy\"\n    },\n    {\n        id: 36,\n        name: \"History\"\n    },\n    {\n        id: 27,\n        name: \"Horror\"\n    },\n    {\n        id: 10402,\n        name: \"Music\"\n    },\n    {\n        id: 9648,\n        name: \"Mystery\"\n    },\n    {\n        id: 10749,\n        name: \"Romance\"\n    },\n    {\n        id: 878,\n        name: \"Science Fiction\"\n    },\n    {\n        id: 10770,\n        name: \"TV Movie\"\n    },\n    {\n        id: 53,\n        name: \"Thriller\"\n    },\n    {\n        id: 10752,\n        name: \"War\"\n    },\n    {\n        id: 37,\n        name: \"Western\"\n    }\n]; // Массив ID жанров фильмов\nlet $0aca34fd57b663fe$var$movieGenres = []; // Инициализация массива жанров для фильма\nlet $0aca34fd57b663fe$export$baa5776c5295c095 = \"\"; // Инициализация разметки карточки фильма\nlet $0aca34fd57b663fe$var$page = 1; // Стартовая страница рендера\nlet $0aca34fd57b663fe$var$totalPages = 1; // Инициализация общего количества страниц\nlet $0aca34fd57b663fe$var$hasBeenCalledElement = false; // Флаг однократного вызова пагинации при первом рендере\nlet $0aca34fd57b663fe$var$seconRender = 0; // Количество рендеров страниц в данной сессии\n$0aca34fd57b663fe$export$31c655352a77bc1a($0aca34fd57b663fe$var$page); // Первый вызов рендера страницы\nfunction $0aca34fd57b663fe$export$31c655352a77bc1a(page) {\n    // Исключаем повторный рендер списка фильмов после перезагрузки страницы ->\n    // -> из запроса пагинации по первой странице\n    $0aca34fd57b663fe$var$seconRender += 1;\n    if ($0aca34fd57b663fe$var$seconRender === 2) return;\n    const BASE_URL = \"https://api.themoviedb.org/3\";\n    const API_KEY = \"70e00eb52bcb7ab46f183ec1381bf837\";\n    const options = {\n        method: \"GET\",\n        headers: {\n            accept: \"application/json\"\n        }\n    };\n    fetch(`${BASE_URL}/trending/movie/week?api_key=${API_KEY}&language=en-US&page=${page}`, options).then((response)=>response.json()).then((response)=>{\n        $0aca34fd57b663fe$export$a35aec2f65da4d0(response.results); // Вызываем функцию формирования карточек фильмов\n        const filmsContainer = document.querySelector(\".js-films-container\"); // Нашли контейнер по классу\n        filmsContainer.innerHTML = $0aca34fd57b663fe$export$baa5776c5295c095; // Вставляем разметку карточек в разметку контейнера\n        (0, $bTcpz.modal)(); // Вызываем функцию модального окна\n        $0aca34fd57b663fe$var$totalPages = $0aca34fd57b663fe$var$totPgs(response.total_pages); // Вызов функции определения общего количества страниц в ответе.\n        if (!$0aca34fd57b663fe$var$hasBeenCalledElement) {\n            (0, $1bab9c519cfa82bc$export$8454457683f90105)($0aca34fd57b663fe$var$totalPages, page); // -> вызвать функцию рендера блока пагинации ->\n            $0aca34fd57b663fe$var$hasBeenCalledElement = true; // -> поставить флаг, что первая загрузка произошла\n        }\n    }).catch((err)=>console.error(err));\n}\nfunction $0aca34fd57b663fe$export$a35aec2f65da4d0(cards) {\n    return $0aca34fd57b663fe$export$baa5776c5295c095 = cards.map(({ title: title, genre_ids: genre_ids, release_date: release_date, poster_path: poster_path, id: id })=>{\n        $0aca34fd57b663fe$var$listGenres(genre_ids); // Вызываем функцию формирования массива жанров по их ID\n        let pathToImage = ``;\n        if (poster_path === null) pathToImage = \"images/image-placeholder.png\";\n        else pathToImage = `https://image.tmdb.org/t/p/w500${poster_path}`;\n        return `\n        <div class=\"film-container js-film-container\" data-modal-open=\"${id}\">\n            <div class=\"image-wrapper\">\n                <img class=\"film-image\" src=\"${pathToImage}\" />\n            </div>\n            <h2 class=\"film-title\">${title.toUpperCase()}</h2>\n            <p class=\"film-data\">${[\n            ...$0aca34fd57b663fe$var$movieGenres\n        ].join(\", \")} | ${release_date.split(\"-\")[0]}</p>\n        </div>\n        `;\n    }).join(\"\");\n}\n// Функция формирования массива жанров по их ID\nfunction $0aca34fd57b663fe$var$listGenres(genre_ids) {\n    $0aca34fd57b663fe$var$movieGenres = []; // Обнуление массива жанров текущего фильма\n    $0aca34fd57b663fe$var$listOfGenres.map(({ id: id, name: name })=>{\n        genre_ids.forEach((number)=>{\n            if (id === number) $0aca34fd57b663fe$var$movieGenres.push(name); // -> добавить название существующего жанра в массив\n        });\n    });\n    return $0aca34fd57b663fe$var$movieGenres;\n}\n// Функция определения общего количества страниц в ответе\nfunction $0aca34fd57b663fe$var$totPgs(num) {\n    if (num > 500) return $0aca34fd57b663fe$var$totalPages = 500;\n    return $0aca34fd57b663fe$var$totalPages = num;\n}\n\n\n\n\nparcelRequire(\"bTcpz\");\nparcelRequire(\"10w4c\");\n\n\n//# sourceMappingURL=index.5bd33e63.js.map\n","import { getMovieDetails } from './getMovieDetails_API';\nimport { addQueue } from './queue';\nimport { addWatched } from './watched';\n\nconst filmsContainer = document.querySelector('.js-modal'); // Контейнер для фильмов\nconst modalElement = document.querySelector(\"[data-modal]\"); // Модальное окно\nconst backdrop = document.querySelector('.js-modal__backdrop'); // Фон модального окна\n\nlet idMovie = 0; // Инициализация id фильма\n\n// Обработчик открытия модального окна через всплытия событий.\nexport function modal() {\n  \n  filmsContainer.addEventListener('click', function(event) {\n    const filmElement = event.target.closest('[data-modal-open]'); // Вешаем слушатель на открытие модалки\n    \n    // Проверяем, кликнут ли элемент с атрибутом data-modal-open\n    if (!filmElement) return;\n\n    // Если клик произошёл по нужному элементу, открываем модальное окно\n    idMovie = filmElement.getAttribute('data-modal-open');\n    document.body.classList.add(\"modal-open\");\n    modalElement.classList.remove(\"is-hidden\");\n    \n    getMovieDetails(idMovie); // Вызов функции для получения деталей фильма    \n  });\n};\n\n// Функция обработки кликов по кнопкам WATCHED и QUEUE в модальном окне \nexport function modalClickButtons() {\n  const modalButtonWatched = document.querySelector('.js-button-watched'); // Находим кнопку WATCHED\n  const modalButtonQueue = document.querySelector('.js-button-queue'); // Находим кнопку QUEUE\n  modalButtonWatched.addEventListener('click', () => addWatched(idMovie)); // Ставим слушатель на кнопку WATCHED\n  modalButtonQueue.addEventListener('click', () => addQueue(idMovie)); // Ставим слушатель на кнопку QUEUE\n}\n\n// Функция закрытия модального окна\nexport function clsModal() {\n  // Выбираем тег с аттрибутом \"data-modal-close\"\n  const refs = {\n    closeModalBtn: document.querySelector(\"[data-modal-close]\"),\n    modal: document.querySelector(\"[data-modal]\"),\n  };\n\n  refs.closeModalBtn.addEventListener(\"click\", closeModal); // Добавляем слушатель на кнопку закрытия модального окна\n  backdrop.addEventListener('click', onBackdropClick); // Добавляем слушатель клика на бекдроп\n  window.addEventListener('keydown', onEscKeyPress); // Добавляем слушатель клика на кнопку Esc\n\n  // Обработчик закрытия модального окна \n  function closeModal() {\n    document.body.classList.remove(\"modal-open\");\n    refs.modal.classList.add(\"is-hidden\");\n    refs.closeModalBtn.removeEventListener(\"click\", closeModal); // Снимаем слушатель с кнопки закрытия модального окна\n    backdrop.removeEventListener('click', onBackdropClick); // Снимаем слушатель с бекдропа\n    window.removeEventListener('keydown', onEscKeyPress); // Снимаем слушатель с кнопки Esc\n  };\n\n  // Обработчик клика в бекдроп\n  function onBackdropClick (event) {\n    if (event.currentTarget === event.target) { // Если кликнули в бекдроп ->\n      closeModal(); // -> вызываем функцию закрытия модалки.\n    }\n  };\n\n  // Обработчик нажатия кнопки ESC\n  function onEscKeyPress(event) {\n    if (event.code === 'Escape') { // если нажата клавиша Esc ->\n      closeModal(); // -> вызываем функцию закрытия модалки.\n    } \n  };\n};\n\n/*\nДанное модальное окно работает с динамическими (асинхронными) данными. Эта особенность учитывается в том,\nчто слушатели элементов открытого модального окна добавляются только после того, как данные модального окна\nбыли динамически сформированы по ответу бекэнда. \nМодальное окно имеет возможность закрываться кликом по иконке (х) в модальном окне, по бекдропу и \nпо нажатию клавиши ESC.\nПри закрытии модального окна снимаются слушатели с иконки закрытия, бекдропа и с кнопки ESC.\n*/","import { clsModal, modalClickButtons } from \"./modal\";\n\nconst movieContainer = document.querySelector('.js-modal__movie'); // Контейнер карточки фильма\n\n// Функция запроса детальной информации о фильме\nexport function getMovieDetails(id) {\n    fetchGetMovieDetails(id)\n        .then(response => {\n            createFilmInfo(response); // Вызываем функцию формирования информации для модального окна\n            movieContainer.innerHTML = cardMarkup; // Вставляем разметку карточки в разметку модалки\n            clsModal(); // Вызываем функцию закрытия модального окна\n            modalClickButtons(); // Вызываем функцию слушателей для кнопок WATCHED и QUEUE\n        })\n        .catch(err => console.error(err));\n};\n\n// Функция HTTP-запроса информации о конкретном фильме\nexport function fetchGetMovieDetails(id) {\n    const BASE_URL = 'https://api.themoviedb.org/3';\n    const API_KEY = '70e00eb52bcb7ab46f183ec1381bf837';\n    const options = {method: 'GET', headers: {accept: 'application/json'}};\n\n    return fetch(`${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`, options)\n        .then(response => { return response.json() });\n}\n\n// Функция формирования информации для модального окна\nfunction createFilmInfo({ title, vote_average, vote_count, popularity,\n    original_title, genres, poster_path, overview}) {\n\n    const genresMovie = listGenresMovie(genres); // Вызываем функцию формирования массива жанров по их ID\n    \n    return cardMarkup = `\n        <img class=\"modal__image\" src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"poster\" />\n        <div class=\"modal__info\">\n            <h2 class=\"modal__header\">${title.toUpperCase()}</h2>\n            <table class=\"modal__table\">\n                <tr>\n                    <td>Vote / Votes</td>\n                    <td><span class=\"modal__table--accent\">${vote_average.toFixed(1)} </span> / ${vote_count}</td>\n                </tr>\n                <tr>\n                    <td>Popularity</td>\n                    <td>${popularity.toFixed(1)}</td>\n                </tr>\n                <tr>\n                    <td>Original Title</td>\n                    <td>${original_title}</td>\n                </tr>\n                <tr>\n                    <td>Genre</td>\n                    <td>${genresMovie}</td>\n                </tr>\n            </table>\n            <h3 class=\"modal__about\">ABOUT</h3>\n            <p class=\"modal__text\">${overview}</p>\n            <div class=\"modal__buttons js-modal__buttons\">\n                <button class=\"modal__button js-button-watched\" type=\"button\">\n                    ADD TO WATCHED\n                </button>\n                <button class=\"modal__button js-button-queue\" type=\"button\">ADD TO QUEUE</button>\n            </div>\n            <!-- Кнопка закрытия модального окна -->\n            <button type=\"button\" class=\"modal__button-close\">\n                <svg class=\"modal__icon\" data-modal-close width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M8 8L22 22\" stroke=\"black\" stroke-width=\"2\"/>\n                    <path d=\"M8 22L22 8\" stroke=\"black\" stroke-width=\"2\"/>\n                </svg>\n            </button>\n        </div>\n        `;\n    \n};\n\n// Функция получения жанров фильма\nexport function listGenresMovie(genres) {\n    const movieGenres = []; // Обнуление массива жанров текущего фильма\n    genres.map(({ name }) => {  // Перебераем массив существующих жанров  \n        movieGenres.push(name); // -> добавить название существующего жанра в массив\n    });\n    return movieGenres.join(', ');\n};","import {saveLocalStorage, loadLocalStorage} from './localStorage';\n\nconst key = 'queue'; // Ключ локального хранилища для просмотренных фильмов\n\nlet queueMovie = loadLocalStorage(key); // Загружаем сохранённые в локальном хранилище данные\nif (!queueMovie) { queueMovie = [] }; // Если данных нет - присвоить переменной пустой массив\n\nexport function addQueue(idMovie) {\n    let i = 0; // Счётчик совпадений\n\n    // Проверяем, есть ли добавляемый фильм в списке для просмотра\n    queueMovie.forEach(element => {\n        if (element === idMovie) {\n            i += 1; \n        }\n    });\n\n    if (i !== 0) {                     // Если фильм в списке есть ->\n            return                     // -> ничего не делаем.\n        } else {                       // Иначе ->\n            queueMovie.push(idMovie) // -> добавляем фильм в список.\n    };\n\n    // Добавляем массив фильмов в локальное хранилище.\n    saveLocalStorage(key, queueMovie); \n};","export function saveLocalStorage(key, value) {\n  try {\n    const serializedState = JSON.stringify(value);\n    localStorage.setItem(key, serializedState);\n  } catch (error) {\n    console.error(\"Set state error: \", error.message);\n  }\n}\n\nexport function loadLocalStorage(key) {\n  try {\n    const serializedState = localStorage.getItem(key);\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n    console.error(\"Get state error: \", error.message);\n  }\n};","import {saveLocalStorage, loadLocalStorage} from './localStorage';\n\nconst key = 'watched'; // Ключ локального хранилища для просмотренных фильмов\n\nlet watchedMovie = loadLocalStorage(key); // Загружаем сохранённые в локальном хранилище данные\nif (!watchedMovie) { watchedMovie = [] }; // Если данных нет - присвоить переменной пустой массив\n\nexport function addWatched(idMovie) {\n    let i = 0; // Счётчик совпадений\n\n    // Проверяем, есть ли добавляемый фильм в списке для просмотра\n    watchedMovie.forEach(element => {\n        if (element === idMovie) {\n            i += 1; \n        }\n    });\n\n    if (i !== 0) {                     // Если фильм в списке есть ->\n            return                     // -> ничего не делаем.\n        } else {                       // Иначе ->\n            watchedMovie.push(idMovie) // -> добавляем фильм в список.\n    };\n\n    // Добавляем массив фильмов в локальное хранилище.\n    saveLocalStorage(key, watchedMovie); \n};\n","import * as getMovieList_API from './js/index/getMovieList_API';\nimport * as pagination from './js/pagination';\nimport * as getSearchMovie_API from './js/index/getSearchMovie_API';\nimport * as modal from './js/modal';\nimport * as getMovieDetails_API from './js/getMovieDetails_API';\n","import { element } from \"../pagination\";\nimport { modal } from \"../modal\";\n\nconst listOfGenres = [\n    { id: 28, name: 'Action' },\n    { id: 12, name: 'Adventure' },\n    { id: 16, name: 'Animation' },\n    { id: 35, name: 'Comedy' },\n    { id: 80, name: 'Crime' },\n    { id: 99, name: 'Documentary' },\n    { id: 18, name: 'Drama' },\n    { id: 10751, name: 'Family' },\n    { id: 14, name: 'Fantasy' },\n    { id: 36, name: 'History' },\n    { id: 27, name: 'Horror' },\n    { id: 10402, name: 'Music' },\n    { id: 9648, name: 'Mystery' },\n    { id: 10749, name: 'Romance' },\n    { id: 878, name: 'Science Fiction' },\n    { id: 10770, name: 'TV Movie' },\n    { id: 53, name: 'Thriller' },\n    { id: 10752, name: 'War' },\n    { id: 37, name: 'Western' },\n]; // Массив ID жанров фильмов\n\nlet movieGenres = []; // Инициализация массива жанров для фильма\nexport let cardsMarkup = ''; // Инициализация разметки карточки фильма\nlet page = 1; // Стартовая страница рендера\nlet totalPages = 1; // Инициализация общего количества страниц\nlet hasBeenCalledElement = false; // Флаг однократного вызова пагинации при первом рендере\n\nlet seconRender = 0; // Количество рендеров страниц в данной сессии\n\nfetchListMovie(page); // Первый вызов рендера страницы\n\n// Функция запроса списка фильмов\nexport function fetchListMovie(page) {\n    // Исключаем повторный рендер списка фильмов после перезагрузки страницы ->\n    // -> из запроса пагинации по первой странице\n    seconRender += 1;\n    if (seconRender === 2) { return }; \n\n    const BASE_URL = 'https://api.themoviedb.org/3';\n    const API_KEY = '70e00eb52bcb7ab46f183ec1381bf837';\n    const options = {method: 'GET', headers: {accept: 'application/json'}};\n\n    fetch(`${BASE_URL}/trending/movie/week?api_key=${API_KEY}&language=en-US&page=${page}`, options)\n        .then(response => response.json())\n        .then(response => {\n            createFilmCards(response.results); // Вызываем функцию формирования карточек фильмов\n            const filmsContainer = document.querySelector('.js-films-container'); // Нашли контейнер по классу\n            filmsContainer.innerHTML = cardsMarkup; // Вставляем разметку карточек в разметку контейнера\n            modal(); // Вызываем функцию модального окна\n            \n            totalPages = totPgs(response.total_pages);  // Вызов функции определения общего количества страниц в ответе.\n            if (!hasBeenCalledElement) {     // Если это первая загрузка страницы ->\n                element(totalPages, page);   // -> вызвать функцию рендера блока пагинации ->\n                hasBeenCalledElement = true; // -> поставить флаг, что первая загрузка произошла\n            };\n        })\n        .catch(err => console.error(err));\n};\n\n// Функция формирования карточек фильмов\nexport function createFilmCards(cards) {\n    return cardsMarkup = cards.map(({ title, genre_ids, release_date, poster_path, id }) => {\n        listGenres(genre_ids); // Вызываем функцию формирования массива жанров по их ID\n\n        let pathToImage = ``;\n        if (poster_path === null) {\n            pathToImage = 'images/image-placeholder.png';\n            // pathToImage = `https://img.freepik.com/premium-vector/transparent-background_738849-1468.jpg?w=500`;\n        } else {\n            pathToImage = `https://image.tmdb.org/t/p/w500${poster_path}`;\n        };\n\n        return `\n        <div class=\"film-container js-film-container\" data-modal-open=\"${id}\">\n            <div class=\"image-wrapper\">\n                <img class=\"film-image\" src=\"${pathToImage}\" />\n            </div>\n            <h2 class=\"film-title\">${title.toUpperCase()}</h2>\n            <p class=\"film-data\">${[...movieGenres].join(', ')} | ${release_date.split('-')[0]}</p>\n        </div>\n        `;\n    }).join('');\n};\n\n// Функция формирования массива жанров по их ID\nfunction listGenres(genre_ids) {\n    movieGenres = []; // Обнуление массива жанров текущего фильма\n    listOfGenres.map(({ id, name }) => {  // Перебераем массив существующих жанров\n        genre_ids.forEach(number => {   // Перебираем массив жанров текущего фильма\n            if (id === number) {        // Если id существующего жанра совпал с id жанра фильма -> \n                movieGenres.push(name); // -> добавить название существующего жанра в массив\n            };\n        })\n    });\n    return movieGenres;\n};\n\n// Функция определения общего количества страниц в ответе\nfunction totPgs(num) {\n    if (num > 500) {\n        return totalPages = 500;\n    }; // Если страниц больше 500 - установить количество 500 страниц\n    return totalPages = num;\n}","import { fetchListMovie } from \"./index/getMovieList_API\";\nimport { isSearch, fetchSearchPagination, searchQuery } from \"./index/getSearchMovie_API\";\n\nconst ulTag = document.querySelector('.js-pagination-list'); // Выбираем список кнопок пагинации.\nconst paginationContainer = document.querySelector('.js-pagination-container'); // Выбираем список кнопок пагинации.\n\n// Функция рендера блока пагинации\nexport function element(totalPages, page) {\n\n    // Проверка необходимости рендерить блок пагинации\n    if (totalPages < 2 || (isSearch && searchQuery == [])) {\n        paginationContainer.classList.add('hidden');\n        return;\n    }; // Если общее количество страниц меньше 2 или активен запрос пользователя и ответ пустой ->\n       // -> (т.е. нет данных) - пагинацию не рендерить (добавить в контейнер пагинации класс 'hidden')\n\n    let liTag = ''; // Инициализация пустого тега <li> для избежания появления \"undefined\".\n    let activeLi = ''; // Инициализация активного тега <li> для избежания появления \"undefined\".\n    let beforePage = page - 2; // Начало диапазона кнопок пагинации.\n    let afterPage = page + 2; // Конец диапазона кнопок пагинации.\n\n    if (page > 1) {\n        // liTag += `<li class=\"btn prev\" onClick='element(${totalPages}, ${page - 1})'>L</li>`;\n        liTag += `<li class=\"btn prev\" onClick='element(${totalPages}, ${page - 1})'>\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M12.6666 8H3.33325\" stroke=\"black\" stroke-width=\"1.33333\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M7.99992 12.6667L3.33325 8.00004L7.99992 3.33337\" stroke=\"black\" stroke-width=\"1.33333\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        </svg></li>`;\n    }; // Если номер страницы больше 1 - добавить кнопку ВЛЕВО.\n\n    if (window.innerWidth > 767) {\n        if (page > 3) { // Если номер текущей страницы больше 2 - добавить страницу с номером 1.\n            liTag += `<li class=\"numb\" onClick='element(${totalPages}, 1)'><span>1</span></li>`;\n            if (page > 4) { // Если номер текущей страницы больше 3 - добавить страницу с точками (...)\n                liTag += `<li class=\"dots\"><span>...</span></li>`;\n            }\n        }; \n    }; // Если ширина вьюпорта более 767 пикселей.\n\n    // Сколько номеров рендерить до текущей страницы\n    if (page === totalPages) { // Если номер страницы равен общ. кол-ву страниц - рендерить на 2 меньше\n        beforePage = beforePage - 2; \n    } else if (page === totalPages - 1) { // Если номер страницы на 1 меньше общ. кол-ва страниц - рендерить на 1 меньше\n        beforePage = beforePage - 1; \n    };\n\n    // Сколько номеров рендерить после текущей страницы\n    if (page === 1) { // Если номер страницы равен 1 - рендерить на 2 больше\n        afterPage = afterPage + 2;\n    } else if (page === 2) { // Если номер страницы равен 2 - рендерить на 1 больше\n        afterPage = afterPage + 1;\n    };\n\n    for (let pageLenght = beforePage; pageLenght <= afterPage; pageLenght += 1) {\n        if (pageLenght > totalPages || pageLenght < 1) {\n            continue;\n        }; // Если номер текущей страницы меньше 1 или больше общего кол-ва страниц - \n           // - не формировать цифры пагинации. \n\n        if (pageLenght === 0) {\n            pageLenght += 1;\n        }; // Если количество страниц равно 0 - добавить 1\n\n        if (pageLenght === page) {\n            activeLi = \"active\";  // Если номер текуще страницы равен pageLenght - добавить стиль active\n            page = pageLenght;    // Текущая страница - это активная страница\n\n            if (isSearch) {                  // Если активен запрос пользователя ->\n                fetchSearchPagination(page); // -> пагинация по запросу пользователя\n            } else {                         // -> иначе\n                fetchListMovie(page);        // -> пагинация по начальному списку фильмов\n            };\n            \n        } else {\n            activeLi = \"\";\n        }; \n\n        liTag += `<li class=\"numb ${activeLi}\" onClick='element(${totalPages}, ${pageLenght})'><span>${pageLenght}</span></li>`; // Перелистывание\n        // страниц при клике по цифрам пагинации.\n    }; // Добавление цифровых кнопок пагинации.\n\n    if (window.innerWidth > 767) {\n        if (page < totalPages - 2) { // Если номер текущей страницы на 1 меньше общего количества страниц - добавить \n        // страницу с номером общего количества страниц.\n            if (page < totalPages - 3) { // Если номер текущей страницы на 2 меньше общего количества страниц - добавить страницу с точками (...)\n                liTag += `<li class=\"dots\"><span>...</span></li>`;\n            };\n            liTag += `<li class=\"numb\" onClick='element(${totalPages}, ${totalPages})'><span>${totalPages}</span></li>`;\n        }; \n    }; // Если ширина вьюпорта более 767 пикселей\n\n    if (page < totalPages) {\n        liTag += `<li class=\"btn next\" onclick='element(${totalPages}, ${page + 1})'>\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M3.33341 8H12.6667\" stroke=\"black\" stroke-width=\"1.33333\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M8.00008 12.6667L12.6667 8.00004L8.00008 3.33337\" stroke=\"black\" stroke-width=\"1.33333\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        </svg></li>`;\n    }; // Если номер страницы меньше общего кол-ва страниц - добавить кнопку ВПРАВО.\n\n    ulTag.innerHTML = liTag; // Добавляем теги в разметку пагинации.\n};\n\n// Добавление функции element в глобальную область видимости.\nwindow.element = element;\n\n// window.innerWidth - определение ширины вьюпорта в JS","import { createFilmCards, cardsMarkup } from './getMovieList_API';\nimport { element } from \"../pagination\";\nimport { modal } from \"../modal\";\n\nconst filmsContainer = document.querySelector('.js-films-container'); // Нашли контейнер по классу\nconst searchForm = document.querySelector('.js-search-form'); // Нашли форму поиска по классу\nsearchForm.addEventListener('submit', onSearch); // Вешаем слушатель на кнопку поиска?\n\nexport let isSearch = false; // Флаг \"есть ли запрос пользователя\"\nexport let searchQuery = ''; // Переменная для хранения запроса пользователя\nconst page = 1; // Стартовая страница пагинации ответа на запрос\n\n// Функция обработки клика по кнопке \"Искать\"\nfunction onSearch(evt) {\n    evt.preventDefault(); // Запрет на перегрузку страницы\n    searchQuery = evt.target[0].value; // Определяем данные в инпуте формы\n    fetchSearchMovie(searchQuery, page) // Вызов функции запроса на сервер по названию фильма\n        .then(response => { // Получение распарсенного ответа\n            isSearch = true; // Флаг наличия запроса пользователя (для пагинации)\n\n            if (response.results.length === 0) {\n                alertMessage();\n            }; // Если ответ пустой (нет данных) - вызвать функцию показа предупреждения \n\n            createFilmCards(response.results); // Вызываем функцию формирования карточек фильмов из getMovieList_API\n            filmsContainer.innerHTML = cardsMarkup; // Вставляем разметку карточек в разметку контейнера\n            modal(); // Вызываем функцию модального окна\n            element(response.total_pages, page); // Вызываем функцию пагинации\n            \n        }) // Формирование карточки фильма если ответ пришел\n        .catch(error => console.log(error)) // Обработка ошибок запроса\n        .finally(() => searchForm.reset()); // Сбросить форму поиска после запроса\n};\n\n// Функция запроса на сервер по названию фильма\nfunction fetchSearchMovie(movieTitle, page) {\n    const BASE_URL = 'https://api.themoviedb.org/3';\n    const API_KEY = '70e00eb52bcb7ab46f183ec1381bf837';\n    const options = {method: 'GET', headers: {accept: 'application/json'}};\n\n    return fetch(`${BASE_URL}/search/movie?query=${movieTitle}&api_key=${API_KEY}&include_adult=false&language=en-US&page=${page}`, options)\n        .then(response => { return response.json() }); // Возврат распарсенного ответа и самого запроса\n};\n\n// Функция запроса по пагинации\nexport function fetchSearchPagination(page) {\n    fetchSearchMovie(searchQuery, page) // Вызов функции запроса на сервер по названию фильма\n        .then(response => { // Получение распарсенного ответа\n            isSearch = true; // Флаг наличия запроса пользователя\n            createFilmCards(response.results); // Вызываем функцию формирования карточек фильмов из getMovieList_API\n            filmsContainer.innerHTML = cardsMarkup; // Вставляем разметку карточек в разметку контейнера\n        }) // Формирование карточки фильма если ответ пришел\n        .catch(error => console.log(error)) // Обработка ошибок запроса\n};\n\n// Функция вывода предупреждения\nfunction alertMessage() {\n    const alert = document.querySelector('.js-search-message'); // Нашли сообщение по классу\n    alert.classList.add('show-message'); // Показать сообщение об ошибке поиска\n    setTimeout(() => {\n        alert.classList.remove('show-message');\n    }, 4500); // Через 4,5 секунды убрать сообщение об ошибке поиска\n};"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$8a7e756c566dd1ea$export$96e4b36520c26a2c","$8a7e756c566dd1ea$export$a48f44ee776277b","$8a7e756c566dd1ea$export$daa063e700c1f396","$10w4c","$edpgF","$9IiBV","$8a7e756c566dd1ea$var$filmsContainer","document","querySelector","$8a7e756c566dd1ea$var$modalElement","$8a7e756c566dd1ea$var$backdrop","$8a7e756c566dd1ea$var$idMovie","addEventListener","event","filmElement","target","closest","getAttribute","body","classList","add","remove","getMovieDetails","modalButtonWatched","modalButtonQueue","addWatched","addQueue","refs","closeModalBtn","modal","closeModal","removeEventListener","onBackdropClick","onEscKeyPress","currentTarget","$0bbeaa56167f8406$export$e7daf9f9f7371f9a","$0bbeaa56167f8406$export$ab9fb40975331ede","$0bbeaa56167f8406$export$a434111540164919","$bTcpz","$0bbeaa56167f8406$var$movieContainer","then","response","$0bbeaa56167f8406$var$createFilmInfo","title","vote_average","vote_count","popularity","original_title","genres","poster_path","overview","genresMovie","cardMarkup","toUpperCase","toFixed","innerHTML","clsModal","modalClickButtons","catch","console","error","fetch","method","headers","accept","json","movieGenres","map","name","push","join","$a595e1401ec493e7$export$2d50e6498fc49b95","$31u3U","$a595e1401ec493e7$var$key","$a595e1401ec493e7$var$queueMovie","loadLocalStorage","idMovie","i","forEach","element","saveLocalStorage","$2338c8cd734f85a6$export$f3928fa528b0a11c","key","value","serializedState","JSON","stringify","localStorage","setItem","message","$2338c8cd734f85a6$export$d3dfa491819f2d3c","getItem","undefined","parse","$7126a8cfa5cf9b17$export$96f7c0dfb8dc6322","$7126a8cfa5cf9b17$var$key","$7126a8cfa5cf9b17$var$watchedMovie","$5fd06ee069b1166a$var$filmsContainer","$5fd06ee069b1166a$var$searchForm","evt","preventDefault","$5fd06ee069b1166a$var$fetchSearchMovie","$5fd06ee069b1166a$export$737148d43a127671","$5fd06ee069b1166a$export$a42b7999c668c0b0","results","length","$5fd06ee069b1166a$var$alertMessage","alert","setTimeout","$0aca34fd57b663fe$export$baa5776c5295c095","total_pages","log","finally","reset","movieTitle","page","$1bab9c519cfa82bc$var$ulTag","$1bab9c519cfa82bc$var$paginationContainer","$1bab9c519cfa82bc$export$8454457683f90105","totalPages","liTag","activeLi","beforePage","afterPage","innerWidth","pageLenght","$0aca34fd57b663fe$var$listOfGenres","$0aca34fd57b663fe$var$movieGenres","$0aca34fd57b663fe$var$totalPages","$0aca34fd57b663fe$var$hasBeenCalledElement","$0aca34fd57b663fe$var$seconRender","$0aca34fd57b663fe$export$31c655352a77bc1a","num","$0aca34fd57b663fe$export$a35aec2f65da4d0","filmsContainer","cards","genre_ids","release_date","number","pathToImage","split"],"version":3,"file":"index.5bd33e63.js.map"}