{"mappings":"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","sources":["<anon>","src/index.js","src/js/getMovieList_API.js","src/js/pagination.js","src/js/getSearchMovie_API.js","src/js/modal.js","src/js/getMovieDetails_API.js"],"sourcesContent":["(function () {\n\n\n\nconst $fe5b3a67510b360c$var$filmsContainer = document.querySelector(\".js-films-container\"); // Нашли контейнер по классу\nconst $fe5b3a67510b360c$var$searchForm = document.querySelector(\".js-search-form\"); // Нашли форму поиска по классу\n$fe5b3a67510b360c$var$searchForm.addEventListener(\"submit\", $fe5b3a67510b360c$var$onSearch); // Вешаем слушатель на кнопку поиска\nlet $fe5b3a67510b360c$export$a42b7999c668c0b0 = false; // Флаг \"есть ли запрос пользователя\"\nlet $fe5b3a67510b360c$export$737148d43a127671 = \"\"; // Переменная для хранения запроса пользователя\nconst $fe5b3a67510b360c$var$page = 1; // Стартовая страница пагинации ответа на запрос\n// Функция обработки клика по кнопке \"Искать\"\nfunction $fe5b3a67510b360c$var$onSearch(evt) {\n    evt.preventDefault(); // Запрет на перегрузку страницы\n    $fe5b3a67510b360c$export$737148d43a127671 = evt.target[0].value; // Определяем данные в инпуте формы\n    $fe5b3a67510b360c$var$fetchSearchMovie($fe5b3a67510b360c$export$737148d43a127671, $fe5b3a67510b360c$var$page) // Вызов функции запроса на сервер по названию фильма\n    .then((response)=>{\n        $fe5b3a67510b360c$export$a42b7999c668c0b0 = true; // Флаг наличия запроса пользователя\n        if (response.results.length === 0) $fe5b3a67510b360c$var$alertMessage();\n        (0, $e039e6a0073f18c7$export$a35aec2f65da4d0)(response.results); // Вызываем функцию формирования карточек фильмов из getMovieList_API\n        $fe5b3a67510b360c$var$filmsContainer.innerHTML = (0, $e039e6a0073f18c7$export$baa5776c5295c095); // Вставляем разметку карточек в разметку контейнера\n        (0, $dfaf77c789ce7a24$export$8454457683f90105)(response.total_pages, $fe5b3a67510b360c$var$page);\n    }) // Формирование карточки фильма если ответ пришел\n    .catch((error)=>console.log(error)) // Обработка ошибок запроса\n    .finally(()=>$fe5b3a67510b360c$var$searchForm.reset()); // Сбросить форму поиска после запроса\n}\n// Функция запроса на сервер по названию фильма\nfunction $fe5b3a67510b360c$var$fetchSearchMovie(movieId, page) {\n    const BASE_URL = \"https://api.themoviedb.org/3\";\n    const API_KEY = \"70e00eb52bcb7ab46f183ec1381bf837\";\n    const options = {\n        method: \"GET\",\n        headers: {\n            accept: \"application/json\"\n        }\n    };\n    return fetch(`${BASE_URL}/search/movie?query=${movieId}&api_key=${API_KEY}&include_adult=false&language=en-US&page=${page}`, options).then((response)=>{\n        return response.json();\n    }); // Возврат распарсенного ответа и самого запроса\n}\nfunction $fe5b3a67510b360c$export$9fecbcbdf80f6d27(page) {\n    $fe5b3a67510b360c$var$fetchSearchMovie($fe5b3a67510b360c$export$737148d43a127671, page) // Вызов функции запроса на сервер по названию фильма\n    .then((response)=>{\n        $fe5b3a67510b360c$export$a42b7999c668c0b0 = true; // Флаг наличия запроса пользователя\n        (0, $e039e6a0073f18c7$export$a35aec2f65da4d0)(response.results); // Вызываем функцию формирования карточек фильмов из getMovieList_API\n        $fe5b3a67510b360c$var$filmsContainer.innerHTML = (0, $e039e6a0073f18c7$export$baa5776c5295c095); // Вставляем разметку карточек в разметку контейнера\n    }) // Формирование карточки фильма если ответ пришел\n    .catch((error)=>console.log(error)) // Обработка ошибок запроса\n    ;\n}\n// Функция вывода предупреждения\nfunction $fe5b3a67510b360c$var$alertMessage() {\n    const alert = document.querySelector(\".js-search-message\"); // Нашли сообщение по классу\n    alert.classList.add(\"show-message\"); // Показать сообщение об ошибке поиска\n    setTimeout(()=>{\n        alert.classList.remove(\"show-message\");\n    }, 4500); // Через 4,5 секунды убрать сообщение об ошибке поиска\n}\n\n\nconst $dfaf77c789ce7a24$var$ulTag = document.querySelector(\".js-pagination-list\"); // Выбираем список кнопок пагинации.\nconst $dfaf77c789ce7a24$var$paginationContainer = document.querySelector(\".js-pagination-container\"); // Выбираем список кнопок пагинации.\nfunction $dfaf77c789ce7a24$export$8454457683f90105(totalPages, page) {\n    // Проверка необходимости рендерить блок пагинации\n    if (totalPages < 2 || (0, $fe5b3a67510b360c$export$a42b7999c668c0b0) && (0, $fe5b3a67510b360c$export$737148d43a127671) == []) {\n        $dfaf77c789ce7a24$var$paginationContainer.classList.add(\"hidden\");\n        return;\n    }\n    // -> (т.е. нет данных) - пагинацию не рендерить (добавить в контейнер пагинации класс 'hidden')\n    let liTag = \"\"; // Инициализация пустого тега <li> для избежания появления \"undefined\".\n    let activeLi = \"\"; // Инициализация активного тега <li> для избежания появления \"undefined\".\n    let beforePage = page - 2; // Начало диапазона кнопок пагинации.\n    let afterPage = page + 2; // Конец диапазона кнопок пагинации.\n    if (page > 1) liTag += `<li class=\"btn prev\" onClick='element(${totalPages}, ${page - 1})'>L</li>`;\n    if (window.innerWidth > 767) {\n        if (page > 3) {\n            liTag += `<li class=\"numb\" onClick='element(${totalPages}, 1)'><span>1</span></li>`;\n            if (page > 4) liTag += `<li class=\"dots\"><span>...</span></li>`;\n        }\n    }\n    // Сколько номеров рендерить до текущей страницы\n    if (page === totalPages) beforePage = beforePage - 2;\n    else if (page === totalPages - 1) beforePage = beforePage - 1;\n    // Сколько номеров рендерить после текущей страницы\n    if (page === 1) afterPage = afterPage + 2;\n    else if (page === 2) afterPage = afterPage + 1;\n    for(let pageLenght = beforePage; pageLenght <= afterPage; pageLenght += 1){\n        if (pageLenght > totalPages || pageLenght < 1) continue;\n        // - не формировать цифры пагинации. \n        if (pageLenght === 0) pageLenght += 1;\n        if (pageLenght === page) {\n            activeLi = \"active\"; // Если номер текуще страницы равен pageLenght - добавить стиль active\n            page = pageLenght; // Текущая страница - это активная страница\n            if (0, $fe5b3a67510b360c$export$a42b7999c668c0b0) (0, $fe5b3a67510b360c$export$9fecbcbdf80f6d27)(page); // -> пагинация по запросу пользователя\n            else (0, $e039e6a0073f18c7$export$31c655352a77bc1a)(page); // -> пагинация по начальному списку фильмов\n        } else activeLi = \"\";\n        liTag += `<li class=\"numb ${activeLi}\" onClick='element(${totalPages}, ${pageLenght})'><span>${pageLenght}</span></li>`; // Перелистывание\n    // страниц при клике по цифрам пагинации.\n    }\n    if (window.innerWidth > 767) {\n        if (page < totalPages - 2) {\n            // страницу с номером общего количества страниц.\n            if (page < totalPages - 3) liTag += `<li class=\"dots\"><span>...</span></li>`;\n            liTag += `<li class=\"numb\" onClick='element(${totalPages}, ${totalPages})'><span>${totalPages}</span></li>`;\n        }\n    }\n    if (page < totalPages) liTag += `<li class=\"btn next\" onclick='element(${totalPages}, ${page + 1})'>R</li>`;\n    $dfaf77c789ce7a24$var$ulTag.innerHTML = liTag; // Добавляем теги в разметку пагинации.\n}\n// Добавление функции element в глобальную область видимости.\nwindow.element = $dfaf77c789ce7a24$export$8454457683f90105; // Вызов функции рендера блока пагинации\n // element(totalPages, page);\n // window.innerWidth - определение ширины вьюпорта в JS\n\n\nfunction $40873ecf3c18e122$export$96e4b36520c26a2c() {\n    // Переменная для хранения ID выбранного фильма\n    let idMovie = null;\n    // Выбираем все теги с аттрибутом \"data-modal-open\"\n    const refs = {\n        openModalBtn: document.querySelectorAll(\"[data-modal-open]\"),\n        closeModalBtn: document.querySelector(\"[data-modal-close]\"),\n        modal: document.querySelector(\"[data-modal]\")\n    };\n    // Снимаем предыдущие слушатели с карточек фильмов\n    for(i = 0; i < refs.openModalBtn.length; i += 1)refs.openModalBtn[i].removeEventListener(\"click\", openModal);\n    // Добавляем слушатели на карточки фильмов\n    for(i = 0; i < refs.openModalBtn.length; i += 1)refs.openModalBtn[i].addEventListener(\"click\", openModal);\n    // Функция открытия модального окна\n    function openModal(event) {\n        document.body.classList.add(\"modal-open\");\n        refs.modal.classList.remove(\"is-hidden\");\n        refs.closeModalBtn.addEventListener(\"click\", closeModal); // Добавляем слушатель на кнопку закрытия модального окна\n        idMovie = event.currentTarget.getAttribute(\"data-modal-open\"); // Определяем ID фильма, по карточке которого кликнули\n    }\n    // Функция закрытия модального окна\n    function closeModal() {\n        document.body.classList.remove(\"modal-open\");\n        refs.modal.classList.add(\"is-hidden\");\n        refs.closeModalBtn.removeEventListener(\"click\", closeModal); // Снимаем слушатель с кнопки закрытия модального окна\n    }\n}\n\n\nconst $e039e6a0073f18c7$var$listOfGenres = [\n    {\n        id: 28,\n        name: \"Action\"\n    },\n    {\n        id: 12,\n        name: \"Adventure\"\n    },\n    {\n        id: 16,\n        name: \"Animation\"\n    },\n    {\n        id: 35,\n        name: \"Comedy\"\n    },\n    {\n        id: 80,\n        name: \"Crime\"\n    },\n    {\n        id: 99,\n        name: \"Documentary\"\n    },\n    {\n        id: 18,\n        name: \"Drama\"\n    },\n    {\n        id: 10751,\n        name: \"Family\"\n    },\n    {\n        id: 14,\n        name: \"Fantasy\"\n    },\n    {\n        id: 36,\n        name: \"History\"\n    },\n    {\n        id: 27,\n        name: \"Horror\"\n    },\n    {\n        id: 10402,\n        name: \"Music\"\n    },\n    {\n        id: 9648,\n        name: \"Mystery\"\n    },\n    {\n        id: 10749,\n        name: \"Romance\"\n    },\n    {\n        id: 878,\n        name: \"Science Fiction\"\n    },\n    {\n        id: 10770,\n        name: \"TV Movie\"\n    },\n    {\n        id: 53,\n        name: \"Thriller\"\n    },\n    {\n        id: 10752,\n        name: \"War\"\n    },\n    {\n        id: 37,\n        name: \"Western\"\n    }\n]; // Массив ID жанров фильмов\nlet $e039e6a0073f18c7$var$movieGenres = []; // Инициализация массива жанров для фильма\nlet $e039e6a0073f18c7$export$baa5776c5295c095 = \"\"; // Инициализация разметки карточки фильма\nlet $e039e6a0073f18c7$var$page = 1; // Стартовая страница рендера\nlet $e039e6a0073f18c7$var$hasBeenCalledElement = false; // Флаг однократного вызова пагинации при первом рендере\nlet $e039e6a0073f18c7$var$hasBeenCalledModal = false; // Флаг однократного вызова функции модального окна\nlet $e039e6a0073f18c7$var$seconRender = 0; // Количество рендеров страниц в данной сессии\n$e039e6a0073f18c7$export$31c655352a77bc1a($e039e6a0073f18c7$var$page); // Первый вызов рендера страницы\nfunction $e039e6a0073f18c7$export$31c655352a77bc1a(page) {\n    // Исключаем повторный рендер списка фильмов после перезагрузки страницы ->\n    // -> из запроса пагинации по первой странице\n    $e039e6a0073f18c7$var$seconRender += 1;\n    if ($e039e6a0073f18c7$var$seconRender === 2) return;\n    const BASE_URL = \"https://api.themoviedb.org/3\";\n    const API_KEY = \"70e00eb52bcb7ab46f183ec1381bf837\";\n    const options = {\n        method: \"GET\",\n        headers: {\n            accept: \"application/json\"\n        }\n    };\n    fetch(`${BASE_URL}/trending/movie/week?api_key=${API_KEY}&language=en-US&page=${page}`, options).then((response)=>response.json()).then((response)=>{\n        $e039e6a0073f18c7$export$a35aec2f65da4d0(response.results); // Вызываем функцию формирования карточек фильмов\n        const filmsContainer = document.querySelector(\".js-films-container\"); // Нашли контейнер по классу\n        filmsContainer.innerHTML = $e039e6a0073f18c7$export$baa5776c5295c095; // Вставляем разметку карточек в разметку контейнера\n        // Условие однократного вызова функции модального окна (для избежания накопления слушателей)\n        // if (!hasBeenCalledModal) {\n        (0, $40873ecf3c18e122$export$96e4b36520c26a2c)();\n        //     hasBeenCalledModal = true;\n        // };\n        const totalPages1 = $e039e6a0073f18c7$var$totPgs(response.total_pages); // Вызов функции определения общего количества страниц в ответе.\n        if (!$e039e6a0073f18c7$var$hasBeenCalledElement) {\n            (0, $dfaf77c789ce7a24$export$8454457683f90105)(totalPages1, page); // -> вызвать функцию рендера блока пагинации ->\n            $e039e6a0073f18c7$var$hasBeenCalledElement = true; // -> поставить флаг, что первая загрузка произошла\n        }\n    }).catch((err)=>console.error(err));\n}\nfunction $e039e6a0073f18c7$export$a35aec2f65da4d0(cards) {\n    console.log(cards);\n    return $e039e6a0073f18c7$export$baa5776c5295c095 = cards.map(({ title: title, genre_ids: genre_ids, release_date: release_date, poster_path: poster_path, id: id })=>{\n        $e039e6a0073f18c7$var$listGenres(genre_ids); // Вызываем функцию формирования массива жанров по их ID\n        return `\n        <div class=\"film-container js-film-container\" data-modal-open=\"${id}\">\n            <div class=\"image-wrapper\">\n                <img class=\"film-image\" src=\"https://image.tmdb.org/t/p/w500${poster_path}\" />\n            </div>\n            <h2 class=\"film-title\">${title.toUpperCase()}</h2>\n            <p class=\"film-data\">${[\n            ...$e039e6a0073f18c7$var$movieGenres\n        ].join(\", \")} | ${release_date.split(\"-\")[0]}</p>\n        </div>\n        `;\n    }).join(\"\");\n}\n// Функция формирования массива жанров по их ID\nfunction $e039e6a0073f18c7$var$listGenres(genre_ids) {\n    $e039e6a0073f18c7$var$movieGenres = []; // Обнуление массива жанров текущего фильма\n    $e039e6a0073f18c7$var$listOfGenres.map(({ id: id, name: name })=>{\n        genre_ids.forEach((number)=>{\n            if (id === number) $e039e6a0073f18c7$var$movieGenres.push(name); // -> добавить название существующего жанра в массив\n        });\n    });\n    return $e039e6a0073f18c7$var$movieGenres;\n}\n// Функция определения общего количества страниц в ответе\nfunction $e039e6a0073f18c7$var$totPgs(num) {\n    if (num > 500) return totalPages = 500;\n    return totalPages = num;\n}\n\n\n\n\n\n\n\n\n})();\n//# sourceMappingURL=index.e60a177b.js.map\n","import * as getMovieList_API from './js/getMovieList_API';\nimport * as pagination from './js/pagination';\nimport * as getSearchMovie_API from './js/getSearchMovie_API';\nimport * as modal from './js/modal';\nimport * as getMovieDetails_API from './js/getMovieDetails_API';\n","import { element } from \"./pagination\";\nimport { modal } from \"./modal\";\n\nconst listOfGenres = [\n    { id: 28, name: 'Action' },\n    { id: 12, name: 'Adventure' },\n    { id: 16, name: 'Animation' },\n    { id: 35, name: 'Comedy' },\n    { id: 80, name: 'Crime' },\n    { id: 99, name: 'Documentary' },\n    { id: 18, name: 'Drama' },\n    { id: 10751, name: 'Family' },\n    { id: 14, name: 'Fantasy' },\n    { id: 36, name: 'History' },\n    { id: 27, name: 'Horror' },\n    { id: 10402, name: 'Music' },\n    { id: 9648, name: 'Mystery' },\n    { id: 10749, name: 'Romance' },\n    { id: 878, name: 'Science Fiction' },\n    { id: 10770, name: 'TV Movie' },\n    { id: 53, name: 'Thriller' },\n    { id: 10752, name: 'War' },\n    { id: 37, name: 'Western' },\n]; // Массив ID жанров фильмов\n\nlet movieGenres = []; // Инициализация массива жанров для фильма\nexport let cardsMarkup = ''; // Инициализация разметки карточки фильма\nlet page = 1; // Стартовая страница рендера\nlet hasBeenCalledElement = false; // Флаг однократного вызова пагинации при первом рендере\nlet hasBeenCalledModal = false; // Флаг однократного вызова функции модального окна\n\nlet seconRender = 0; // Количество рендеров страниц в данной сессии\n\nfetchListMovie(page); // Первый вызов рендера страницы\n\n// Функция запроса списка фильмов\nexport function fetchListMovie(page) {\n    // Исключаем повторный рендер списка фильмов после перезагрузки страницы ->\n    // -> из запроса пагинации по первой странице\n    seconRender += 1;\n    if (seconRender === 2) { return }; \n\n    const BASE_URL = 'https://api.themoviedb.org/3';\n    const API_KEY = '70e00eb52bcb7ab46f183ec1381bf837';\n    const options = {method: 'GET', headers: {accept: 'application/json'}};\n\n    fetch(`${BASE_URL}/trending/movie/week?api_key=${API_KEY}&language=en-US&page=${page}`, options)\n        .then(response => response.json())\n        .then(response => {\n            createFilmCards(response.results); // Вызываем функцию формирования карточек фильмов\n            const filmsContainer = document.querySelector('.js-films-container'); // Нашли контейнер по классу\n            filmsContainer.innerHTML = cardsMarkup; // Вставляем разметку карточек в разметку контейнера\n            // Условие однократного вызова функции модального окна (для избежания накопления слушателей)\n            // if (!hasBeenCalledModal) {\n                modal();\n            //     hasBeenCalledModal = true;\n            // };\n            \n            const totalPages = totPgs(response.total_pages);  // Вызов функции определения общего количества страниц в ответе.\n            if (!hasBeenCalledElement) {     // Если это первая загрузка страницы ->\n                element(totalPages, page);   // -> вызвать функцию рендера блока пагинации ->\n                hasBeenCalledElement = true; // -> поставить флаг, что первая загрузка произошла\n            };\n        })\n        .catch(err => console.error(err));\n};\n\n// Функция формирования карточек фильмов\nexport function createFilmCards(cards) {\n    console.log(cards);\n    return cardsMarkup = cards.map(({ title, genre_ids, release_date, poster_path, id }) => {\n        listGenres(genre_ids); // Вызываем функцию формирования массива жанров по их ID\n        return `\n        <div class=\"film-container js-film-container\" data-modal-open=\"${id}\">\n            <div class=\"image-wrapper\">\n                <img class=\"film-image\" src=\"https://image.tmdb.org/t/p/w500${poster_path}\" />\n            </div>\n            <h2 class=\"film-title\">${title.toUpperCase()}</h2>\n            <p class=\"film-data\">${[...movieGenres].join(', ')} | ${release_date.split('-')[0]}</p>\n        </div>\n        `;\n    }).join('');\n};\n\n// Функция формирования массива жанров по их ID\nfunction listGenres(genre_ids) {\n    movieGenres = []; // Обнуление массива жанров текущего фильма\n    listOfGenres.map(({ id, name }) => {  // Перебераем массив существующих жанров\n        genre_ids.forEach(number => {   // Перебираем массив жанров текущего фильма\n            if (id === number) {        // Если id существующего жанра совпал с id жанра фильма -> \n                movieGenres.push(name); // -> добавить название существующего жанра в массив\n            };\n        })\n    });\n    return movieGenres;\n};\n\n// Функция определения общего количества страниц в ответе\nfunction totPgs(num) {\n    if (num > 500) {\n        return totalPages = 500;\n    }; // Если страниц больше 500 - установить количество 500 страниц\n    return totalPages = num;\n}","import { fetchListMovie } from \"./getMovieList_API\";\nimport { isSearch, fetchSearchPagination, searchQuery } from \"./getSearchMovie_API\";\n\nconst ulTag = document.querySelector('.js-pagination-list'); // Выбираем список кнопок пагинации.\nconst paginationContainer = document.querySelector('.js-pagination-container'); // Выбираем список кнопок пагинации.\n\n// Функция рендера блока пагинации\nexport function element(totalPages, page) {\n\n    // Проверка необходимости рендерить блок пагинации\n    if (totalPages < 2 || (isSearch && searchQuery == [])) {\n        paginationContainer.classList.add('hidden');\n        return;\n    }; // Если общее количество страниц меньше 2 или активен запрос пользователя и ответ пустой ->\n       // -> (т.е. нет данных) - пагинацию не рендерить (добавить в контейнер пагинации класс 'hidden')\n\n    let liTag = ''; // Инициализация пустого тега <li> для избежания появления \"undefined\".\n    let activeLi = ''; // Инициализация активного тега <li> для избежания появления \"undefined\".\n    let beforePage = page - 2; // Начало диапазона кнопок пагинации.\n    let afterPage = page + 2; // Конец диапазона кнопок пагинации.\n\n    if (page > 1) {\n        liTag += `<li class=\"btn prev\" onClick='element(${totalPages}, ${page - 1})'>L</li>`;\n    }; // Если номер страницы больше 1 - добавить кнопку ВЛЕВО.\n\n    if (window.innerWidth > 767) {\n        if (page > 3) { // Если номер текущей страницы больше 2 - добавить страницу с номером 1.\n            liTag += `<li class=\"numb\" onClick='element(${totalPages}, 1)'><span>1</span></li>`;\n            if (page > 4) { // Если номер текущей страницы больше 3 - добавить страницу с точками (...)\n                liTag += `<li class=\"dots\"><span>...</span></li>`;\n            }\n        }; \n    }; // Если ширина вьюпорта более 767 пикселей.\n\n    // Сколько номеров рендерить до текущей страницы\n    if (page === totalPages) { // Если номер страницы равен общ. кол-ву страниц - рендерить на 2 меньше\n        beforePage = beforePage - 2; \n    } else if (page === totalPages - 1) { // Если номер страницы на 1 меньше общ. кол-ва страниц - рендерить на 1 меньше\n        beforePage = beforePage - 1; \n    };\n\n    // Сколько номеров рендерить после текущей страницы\n    if (page === 1) { // Если номер страницы равен 1 - рендерить на 2 больше\n        afterPage = afterPage + 2;\n    } else if (page === 2) { // Если номер страницы равен 2 - рендерить на 1 больше\n        afterPage = afterPage + 1;\n    };\n\n    for (let pageLenght = beforePage; pageLenght <= afterPage; pageLenght += 1) {\n        if (pageLenght > totalPages || pageLenght < 1) {\n            continue;\n        }; // Если номер текущей страницы меньше 1 или больше общего кол-ва страниц - \n           // - не формировать цифры пагинации. \n\n        if (pageLenght === 0) {\n            pageLenght += 1;\n        }; // Если количество страниц равно 0 - добавить 1\n\n        if (pageLenght === page) {\n            activeLi = \"active\";  // Если номер текуще страницы равен pageLenght - добавить стиль active\n            page = pageLenght;    // Текущая страница - это активная страница\n\n            if (isSearch) {                  // Если активен запрос пользователя ->\n                fetchSearchPagination(page); // -> пагинация по запросу пользователя\n            } else {                         // -> иначе\n                fetchListMovie(page);        // -> пагинация по начальному списку фильмов\n            };\n            \n        } else {\n            activeLi = \"\";\n        }; \n\n        liTag += `<li class=\"numb ${activeLi}\" onClick='element(${totalPages}, ${pageLenght})'><span>${pageLenght}</span></li>`; // Перелистывание\n        // страниц при клике по цифрам пагинации.\n    }; // Добавление цифровых кнопок пагинации.\n\n    if (window.innerWidth > 767) {\n        if (page < totalPages - 2) { // Если номер текущей страницы на 1 меньше общего количества страниц - добавить \n        // страницу с номером общего количества страниц.\n            if (page < totalPages - 3) { // Если номер текущей страницы на 2 меньше общего количества страниц - добавить страницу с точками (...)\n                liTag += `<li class=\"dots\"><span>...</span></li>`;\n            };\n            liTag += `<li class=\"numb\" onClick='element(${totalPages}, ${totalPages})'><span>${totalPages}</span></li>`;\n        }; \n    }; // Если ширина вьюпорта более 767 пикселей\n\n    if (page < totalPages) {\n        liTag += `<li class=\"btn next\" onclick='element(${totalPages}, ${page + 1})'>R</li>`;\n    }; // Если номер страницы меньше общего кол-ва страниц - добавить кнопку ВПРАВО.\n\n    ulTag.innerHTML = liTag; // Добавляем теги в разметку пагинации.\n};\n\n// Добавление функции element в глобальную область видимости.\nwindow.element = element;\n\n// Вызов функции рендера блока пагинации\n// element(totalPages, page);\n\n// window.innerWidth - определение ширины вьюпорта в JS","import { createFilmCards, cardsMarkup } from './getMovieList_API';\nimport { element } from \"./pagination\";\n\nconst filmsContainer = document.querySelector('.js-films-container'); // Нашли контейнер по классу\nconst searchForm = document.querySelector('.js-search-form'); // Нашли форму поиска по классу\nsearchForm.addEventListener('submit', onSearch); // Вешаем слушатель на кнопку поиска\n\nexport let isSearch = false; // Флаг \"есть ли запрос пользователя\"\nexport let searchQuery = ''; // Переменная для хранения запроса пользователя\nconst page = 1; // Стартовая страница пагинации ответа на запрос\n\n// Функция обработки клика по кнопке \"Искать\"\nfunction onSearch(evt) {\n    evt.preventDefault(); // Запрет на перегрузку страницы\n    searchQuery = evt.target[0].value; // Определяем данные в инпуте формы\n    fetchSearchMovie(searchQuery, page) // Вызов функции запроса на сервер по названию фильма\n        .then(response => { // Получение распарсенного ответа\n            isSearch = true; // Флаг наличия запроса пользователя\n\n            if (response.results.length === 0) {\n                alertMessage();\n            }; // Если ответ пустой (нет данных) - вызвать функцию показа предупреждения \n\n            createFilmCards(response.results); // Вызываем функцию формирования карточек фильмов из getMovieList_API\n            filmsContainer.innerHTML = cardsMarkup; // Вставляем разметку карточек в разметку контейнера\n            element(response.total_pages, page);\n        }) // Формирование карточки фильма если ответ пришел\n        .catch(error => console.log(error)) // Обработка ошибок запроса\n        .finally(() => searchForm.reset()); // Сбросить форму поиска после запроса\n};\n\n// Функция запроса на сервер по названию фильма\nfunction fetchSearchMovie(movieId, page) {\n    const BASE_URL = 'https://api.themoviedb.org/3';\n    const API_KEY = '70e00eb52bcb7ab46f183ec1381bf837';\n    const options = {method: 'GET', headers: {accept: 'application/json'}};\n\n    return fetch(`${BASE_URL}/search/movie?query=${movieId}&api_key=${API_KEY}&include_adult=false&language=en-US&page=${page}`, options)\n        .then(response => { return response.json() }); // Возврат распарсенного ответа и самого запроса\n};\n\n// Функция запроса по пагинации\nexport function fetchSearchPagination(page) {\n    fetchSearchMovie(searchQuery, page) // Вызов функции запроса на сервер по названию фильма\n        .then(response => { // Получение распарсенного ответа\n            isSearch = true; // Флаг наличия запроса пользователя\n            createFilmCards(response.results); // Вызываем функцию формирования карточек фильмов из getMovieList_API\n            filmsContainer.innerHTML = cardsMarkup; // Вставляем разметку карточек в разметку контейнера\n        }) // Формирование карточки фильма если ответ пришел\n        .catch(error => console.log(error)) // Обработка ошибок запроса\n};\n\n// Функция вывода предупреждения\nfunction alertMessage() {\n    const alert = document.querySelector('.js-search-message'); // Нашли сообщение по классу\n    alert.classList.add('show-message'); // Показать сообщение об ошибке поиска\n    setTimeout(() => {\n        alert.classList.remove('show-message');\n    }, 4500); // Через 4,5 секунды убрать сообщение об ошибке поиска\n}\n","export function modal() {\n  // Переменная для хранения ID выбранного фильма\n  let idMovie = null;\n\n  // Выбираем все теги с аттрибутом \"data-modal-open\"\n  const refs = {\n    openModalBtn: document.querySelectorAll(\"[data-modal-open]\"),\n    closeModalBtn: document.querySelector(\"[data-modal-close]\"),\n    modal: document.querySelector(\"[data-modal]\"),\n  };\n\n  // Снимаем предыдущие слушатели с карточек фильмов\n  for (i = 0; i < refs.openModalBtn.length; i += 1) {\n    refs.openModalBtn[i].removeEventListener(\"click\", openModal);\n  }\n\n  // Добавляем слушатели на карточки фильмов\n  for (i = 0; i < refs.openModalBtn.length; i += 1) {\n    refs.openModalBtn[i].addEventListener(\"click\", openModal);\n  }\n\n  // Функция открытия модального окна\n  function openModal(event) {\n    document.body.classList.add(\"modal-open\");\n    refs.modal.classList.remove(\"is-hidden\");\n    refs.closeModalBtn.addEventListener(\"click\", closeModal); // Добавляем слушатель на кнопку закрытия модального окна\n    idMovie = event.currentTarget.getAttribute('data-modal-open'); // Определяем ID фильма, по карточке которого кликнули\n  }\n\n  // Функция закрытия модального окна\n  function closeModal() {\n    document.body.classList.remove(\"modal-open\");\n    refs.modal.classList.add(\"is-hidden\");\n    refs.closeModalBtn.removeEventListener(\"click\", closeModal); // Снимаем слушатель с кнопки закрытия модального окна\n  };\n}\n",""],"names":["$fe5b3a67510b360c$var$filmsContainer","document","querySelector","$fe5b3a67510b360c$var$searchForm","addEventListener","evt","preventDefault","$fe5b3a67510b360c$var$fetchSearchMovie","$fe5b3a67510b360c$export$737148d43a127671","target","value","then","response","$fe5b3a67510b360c$export$a42b7999c668c0b0","results","length","$fe5b3a67510b360c$var$alertMessage","alert","classList","add","setTimeout","remove","innerHTML","$e039e6a0073f18c7$export$baa5776c5295c095","total_pages","catch","error","console","log","finally","reset","movieId","page","fetch","method","headers","accept","json","$dfaf77c789ce7a24$var$ulTag","$dfaf77c789ce7a24$var$paginationContainer","$dfaf77c789ce7a24$export$8454457683f90105","totalPages","liTag","activeLi","beforePage","afterPage","window","innerWidth","pageLenght","element","$e039e6a0073f18c7$var$listOfGenres","id","name","$e039e6a0073f18c7$var$movieGenres","$e039e6a0073f18c7$var$hasBeenCalledElement","$e039e6a0073f18c7$var$seconRender","$e039e6a0073f18c7$export$31c655352a77bc1a","num","$e039e6a0073f18c7$export$a35aec2f65da4d0","filmsContainer","refs","openModalBtn","querySelectorAll","closeModalBtn","modal","i","removeEventListener","openModal","event","body","closeModal","currentTarget","getAttribute","totalPages1","err","cards","map","title","genre_ids","release_date","poster_path","forEach","number","push","toUpperCase","join","split"],"version":3,"file":"index.e60a177b.js.map"}